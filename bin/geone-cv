#! /usr/bin/env python3


import argparse
import json
import os
import sys

from sklearn.model_selection import StratifiedKFold, GridSearchCV
from geone.cv_metrics import brier_score, zero_one_score
from geone.deesseinterface import DeesseEstimator

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input', help='Input file')

    args = parser.parse_args()
    with open(args.input, 'r') as input_file:
        parameters = json.load(input_file)

    cross_validator = CrossValidator(
            results_path=parameters['results_path'],
            estimator_parameters=parameters['estimator'],
            scoring = parameters['scoring'],
            cv_splitter_parameters=parameters['cv_splitter'],
            model_selector_parameters=parameters['model_selector'],
            )

class CrossValidator():
    def __init__(self,
            results_path,
            estimator_parameters,
            scoring,
            cv_splitter_parameters,
            model_selector_parameters,
            ):

        # Preprocess scoring dictionary (recognize geone functions)
        for key, scoring_method in scoring.items():
            if scoring_method in ['brier_score', 'zero_one_score']:
                scoring[key] = eval(scoring_method)
        self.scoring = scoring

        # Set estimator and scikit learn's engine
        self.estimator = DeesseEstimator(**estimator_parameters)
        self.cv_splitter = StratifiedKFold(**cv_splitter_parameters)
        self.model_selector = GridSearchCV(estimator=self.estimator,
                scoring=self.scoring,
                **model_selector_parameters)

        # Prepare the results directory
        try:
            os.makedirs(results_path)
        except FileExistsError:
            sys.exit("Directory {} exists. "
                    "Remove it or specify another results_path in your input".format(results_path))
        self.results_path = results_path



if __name__=='__main__':
    main()
