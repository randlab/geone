# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_deesse')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_deesse')
    _deesse = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_deesse', [dirname(__file__)])
        except ImportError:
            import _deesse
            return _deesse
        try:
            _mod = imp.load_module('_deesse', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _deesse = swig_import_helper()
    del swig_import_helper
else:
    import _deesse
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def fopen(filename, mode):
    return _deesse.fopen(filename, mode)
fopen = _deesse.fopen

def fclose(f):
    return _deesse.fclose(f)
fclose = _deesse.fclose
MPDS_VERSION_NUMBER = _deesse.MPDS_VERSION_NUMBER
MPDS_BUILD_NUMBER = _deesse.MPDS_BUILD_NUMBER
FALSE = _deesse.FALSE
TRUE = _deesse.TRUE
MPDS_SHOW_PROGRESS_MONITOR = _deesse.MPDS_SHOW_PROGRESS_MONITOR
MPDS_SHOW_TIME = _deesse.MPDS_SHOW_TIME
MPDS_SHOW_DEBUG = _deesse.MPDS_SHOW_DEBUG
MPDS_SHOW_SIMINPUTASCII = _deesse.MPDS_SHOW_SIMINPUTASCII
MPDS_SHOW_SIMINPUTASCII_FOR_DEBUGGING = _deesse.MPDS_SHOW_SIMINPUTASCII_FOR_DEBUGGING
MPDS_SHOW_MPDS_POST_PROCESSING_PATH = _deesse.MPDS_SHOW_MPDS_POST_PROCESSING_PATH
MPDS_CHECK_SEARCHNEIGHBORHOODPARAMETERS_AND_ROTATION = _deesse.MPDS_CHECK_SEARCHNEIGHBORHOODPARAMETERS_AND_ROTATION
MPDS_USE_COPY_OF_SIMIMAGE = _deesse.MPDS_USE_COPY_OF_SIMIMAGE
MPDS_USE_COPY_OF_TRAINIMAGE = _deesse.MPDS_USE_COPY_OF_TRAINIMAGE
MPDS_USE_COPY_OF_HOMOTHETYIMAGE = _deesse.MPDS_USE_COPY_OF_HOMOTHETYIMAGE
MPDS_USE_COPY_OF_HOMOTHETYVALUE = _deesse.MPDS_USE_COPY_OF_HOMOTHETYVALUE
MPDS_USE_COPY_OF_ROTATIONIMAGE = _deesse.MPDS_USE_COPY_OF_ROTATIONIMAGE
MPDS_USE_COPY_OF_ROTATIONVALUE = _deesse.MPDS_USE_COPY_OF_ROTATIONVALUE
MPDS_FREE_CONDITIONING_DATA_AFTER_INTEGRATION = _deesse.MPDS_FREE_CONDITIONING_DATA_AFTER_INTEGRATION
MPDS_FORMAT_DEFAULT = _deesse.MPDS_FORMAT_DEFAULT
MPDS_FORMAT_WIDTH = _deesse.MPDS_FORMAT_WIDTH
MPDS_FORMAT_PRECISION = _deesse.MPDS_FORMAT_PRECISION
MPDS_FILENAME_LENGTH = _deesse.MPDS_FILENAME_LENGTH
MPDS_VARNAME_LENGTH = _deesse.MPDS_VARNAME_LENGTH
MPDS_LINE_LENGTH = _deesse.MPDS_LINE_LENGTH
MPDS_WORD_LENGTH = _deesse.MPDS_WORD_LENGTH
MPDS_MISSING_VALUE = _deesse.MPDS_MISSING_VALUE
MPDS_JOB_VARNAME = _deesse.MPDS_JOB_VARNAME
MPDS_JOB_DATA_LOCATION = _deesse.MPDS_JOB_DATA_LOCATION
MPDS_JOB_DATA_VALUE = _deesse.MPDS_JOB_DATA_VALUE
MPDS_SHIFT_FACTOR_FOR_POINT = _deesse.MPDS_SHIFT_FACTOR_FOR_POINT
MPDS_MAX_NB_VALUE = _deesse.MPDS_MAX_NB_VALUE
MPDS_EPSILON_HARD = _deesse.MPDS_EPSILON_HARD
MPDS_EPSILON = _deesse.MPDS_EPSILON
MPDS_EPSILON_SOFT = _deesse.MPDS_EPSILON_SOFT
MPDS_INFINITY = _deesse.MPDS_INFINITY
MPDS_CHUNK = _deesse.MPDS_CHUNK
MPDS_NB_AVAILABLE_DISTANCE = _deesse.MPDS_NB_AVAILABLE_DISTANCE
MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_1D = _deesse.MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_1D
MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_2D = _deesse.MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_2D
MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_3D = _deesse.MPDS_POST_PROCESSING_NNEIGHBORINGNODE_DEFAULT_3D
MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_1D = _deesse.MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_1D
MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_2D = _deesse.MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_2D
MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_3D = _deesse.MPDS_POST_PROCESSING_NEIGHBORINGNODE_DENSITY_DEFAULT_3D
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_0 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_0
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_1 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_1
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_2 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_2
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_3 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_3
MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_4 = _deesse.MPDS_POST_PROCESSING_DISTANCE_THRESHOLD_DEFAULT_DISTANCETYPE_4
MPDS_POST_PROCESSING_MAX_SCAN_FRACTION_DEFAULT = _deesse.MPDS_POST_PROCESSING_MAX_SCAN_FRACTION_DEFAULT
MPDS_POST_PROCESSING_TOLERANCE_DEFAULT = _deesse.MPDS_POST_PROCESSING_TOLERANCE_DEFAULT
MPDS_POST_PROCESSING_SEED_INCREMENT = _deesse.MPDS_POST_PROCESSING_SEED_INCREMENT
MPDS_SIMULATION_GRID_AS_TRAINING_IMAGE = _deesse.MPDS_SIMULATION_GRID_AS_TRAINING_IMAGE
MPDS_USE_TRAINING_IMAGE_FOR_CONNECTIVITY = _deesse.MPDS_USE_TRAINING_IMAGE_FOR_CONNECTIVITY
MPDS_PREFIX_FOR_TEMPORARY_FILE = _deesse.MPDS_PREFIX_FOR_TEMPORARY_FILE
MPDS_PREFIX_FOR_OCCURRENCE_PROPORTION = _deesse.MPDS_PREFIX_FOR_OCCURRENCE_PROPORTION
MPDS_SUFFIX_FOR_REALIZATION = _deesse.MPDS_SUFFIX_FOR_REALIZATION
MPDS_SUFFIX_FOR_CLOSING = _deesse.MPDS_SUFFIX_FOR_CLOSING
MPDS_SUFFIX_FOR_CONNECTIVITY_FUNCTION = _deesse.MPDS_SUFFIX_FOR_CONNECTIVITY_FUNCTION
MPDS_SUFFIX_FOR_CORRELOGRAM = _deesse.MPDS_SUFFIX_FOR_CORRELOGRAM
MPDS_SUFFIX_FOR_COVARIANCE = _deesse.MPDS_SUFFIX_FOR_COVARIANCE
MPDS_SUFFIX_FOR_COVARIANCE_NOT_CENTRED = _deesse.MPDS_SUFFIX_FOR_COVARIANCE_NOT_CENTRED
MPDS_SUFFIX_FOR_DILATING = _deesse.MPDS_SUFFIX_FOR_DILATING
MPDS_SUFFIX_FOR_DISTANCE_DILATING = _deesse.MPDS_SUFFIX_FOR_DISTANCE_DILATING
MPDS_SUFFIX_FOR_DISTANCE_L1 = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L1
MPDS_SUFFIX_FOR_DISTANCE_L1_SIGN = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L1_SIGN
MPDS_SUFFIX_FOR_DISTANCE_L2 = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L2
MPDS_SUFFIX_FOR_DISTANCE_L2_SIGN = _deesse.MPDS_SUFFIX_FOR_DISTANCE_L2_SIGN
MPDS_SUFFIX_FOR_ERODING = _deesse.MPDS_SUFFIX_FOR_ERODING
MPDS_SUFFIX_FOR_GEOBODY = _deesse.MPDS_SUFFIX_FOR_GEOBODY
MPDS_SUFFIX_FOR_INDICATOR = _deesse.MPDS_SUFFIX_FOR_INDICATOR
MPDS_SUFFIX_FOR_MOBILE_AVERAGE = _deesse.MPDS_SUFFIX_FOR_MOBILE_AVERAGE
MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_EXP = _deesse.MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_EXP
MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_LAP = _deesse.MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_LAP
MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_RED = _deesse.MPDS_SUFFIX_FOR_GAUSSIAN_PYRAMID_RED
MPDS_SUFFIX_FOR_OPENING = _deesse.MPDS_SUFFIX_FOR_OPENING
MPDS_SUFFIX_FOR_QC_INDICATOR_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_MEAN_AND_SD_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_MEAN_AND_SD_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_QUANTILE_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_QUANTILE_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_DETAIL_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_MARK_DETAIL_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_ALL_PAIRS_SCALE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_ALL_PAIRS_SCALE
MPDS_SUFFIX_FOR_QC_INDICATOR_ENSEMBLE = _deesse.MPDS_SUFFIX_FOR_QC_INDICATOR_ENSEMBLE
MPDS_SUFFIX_FOR_QC_MPH_PATTERN_COUNT_SUM_ENSEMBLE = _deesse.MPDS_SUFFIX_FOR_QC_MPH_PATTERN_COUNT_SUM_ENSEMBLE
MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE = _deesse.MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE
MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE_DESCRIPTION = _deesse.MPDS_SUFFIX_FOR_QC_ENSEMBLE_ZONE_DESCRIPTION
MPDS_SUFFIX_FOR_QC_ENSEMBLE_DESCRIPTION = _deesse.MPDS_SUFFIX_FOR_QC_ENSEMBLE_DESCRIPTION
MPDS_SUFFIX_FOR_TRANSIOGRAM = _deesse.MPDS_SUFFIX_FOR_TRANSIOGRAM
MPDS_SUFFIX_FOR_VARIOGRAM = _deesse.MPDS_SUFFIX_FOR_VARIOGRAM
MPDS_EXTENSION_FOR_IMAGE_FILE = _deesse.MPDS_EXTENSION_FOR_IMAGE_FILE
MPDS_EXTENSION_FOR_TEXT_FILE = _deesse.MPDS_EXTENSION_FOR_TEXT_FILE
MPDS_NAME_FOR_PGM_VAR = _deesse.MPDS_NAME_FOR_PGM_VAR
MPDS_NAME_FOR_PPM_VAR0 = _deesse.MPDS_NAME_FOR_PPM_VAR0
MPDS_NAME_FOR_PPM_VAR1 = _deesse.MPDS_NAME_FOR_PPM_VAR1
MPDS_NAME_FOR_PPM_VAR2 = _deesse.MPDS_NAME_FOR_PPM_VAR2
MPDS_NAME_FOR_PATH_INDEX_VAR = _deesse.MPDS_NAME_FOR_PATH_INDEX_VAR
MPDS_NAME_FOR_ERROR_VAR = _deesse.MPDS_NAME_FOR_ERROR_VAR
MPDS_NB_DIGIT_FOR_REALIZATION_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_REALIZATION_NUMBER
MPDS_NB_DIGIT_FOR_SCALE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_SCALE_NUMBER
MPDS_NB_DIGIT_FOR_ZONE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_ZONE_NUMBER
MPDS_NB_DIGIT_FOR_VARIABLE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_VARIABLE_NUMBER
MPDS_NB_DIGIT_FOR_QC_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_QC_NUMBER
MPDS_NB_DIGIT_FOR_ENSEMBLE_NUMBER = _deesse.MPDS_NB_DIGIT_FOR_ENSEMBLE_NUMBER
MPDS_VTK_VERSION_NUMBER = _deesse.MPDS_VTK_VERSION_NUMBER
MPDS_SEPARATION_LINE_EQUAL = _deesse.MPDS_SEPARATION_LINE_EQUAL
MPDS_SEPARATION_LINE_STAR = _deesse.MPDS_SEPARATION_LINE_STAR
MPDS_SEPARATION_LINE_MINUS = _deesse.MPDS_SEPARATION_LINE_MINUS
MPDS_SEPARATION_LINE_PLUS = _deesse.MPDS_SEPARATION_LINE_PLUS
MPDS_NODEPATH_WEIGHT_MIN = _deesse.MPDS_NODEPATH_WEIGHT_MIN
MPDS_NODEPATH_A0_MIN = _deesse.MPDS_NODEPATH_A0_MIN
MPDS_NODEPATH_A0_MAX = _deesse.MPDS_NODEPATH_A0_MAX
MPDS_MIN_SPACING = _deesse.MPDS_MIN_SPACING
MPDS_MAX_NVAR = _deesse.MPDS_MAX_NVAR
MPDS_MAX_NXYZ = _deesse.MPDS_MAX_NXYZ
MPDS_MAX_NXYZV = _deesse.MPDS_MAX_NXYZV
MPDS_MIN_ANISOTROPY_RATIO = _deesse.MPDS_MIN_ANISOTROPY_RATIO
MPDS_MAX_NTRAINIMAGE = _deesse.MPDS_MAX_NTRAINIMAGE
MPDS_MAX_TRAINVALUERANGEEXTENSIONMAX = _deesse.MPDS_MAX_TRAINVALUERANGEEXTENSIONMAX
MPDS_MAX_TRAIN_MISSING_VALUE_PROPORTION = _deesse.MPDS_MAX_TRAIN_MISSING_VALUE_PROPORTION
MPDS_MIN_NNEIGHBORINGNODE = _deesse.MPDS_MIN_NNEIGHBORINGNODE
MPDS_MAX_NNEIGHBORINGNODE = _deesse.MPDS_MAX_NNEIGHBORINGNODE
MPDS_MAX_NNEIGHBORINGNODE_ALL_VAR = _deesse.MPDS_MAX_NNEIGHBORINGNODE_ALL_VAR
MPDS_MIN_NEIGHBORINGNODE_DENSITY = _deesse.MPDS_MIN_NEIGHBORINGNODE_DENSITY
MPDS_MAX_NEIGHBORINGNODE_DENSITY = _deesse.MPDS_MAX_NEIGHBORINGNODE_DENSITY
MPDS_MIN_DISTANCETHRESHOLD = _deesse.MPDS_MIN_DISTANCETHRESHOLD
MPDS_MAX_DISTANCETHRESHOLD = _deesse.MPDS_MAX_DISTANCETHRESHOLD
MPDS_MIN_MAXSCANFRACTION = _deesse.MPDS_MIN_MAXSCANFRACTION
MPDS_MAX_MAXSCANFRACTION = _deesse.MPDS_MAX_MAXSCANFRACTION
MPDS_MIN_MAXSCANFRACTION_VARIABLE_TRANSFORM = _deesse.MPDS_MIN_MAXSCANFRACTION_VARIABLE_TRANSFORM
MPDS_MAX_MAXSCANFRACTION_VARIABLE_TRANSFORM = _deesse.MPDS_MAX_MAXSCANFRACTION_VARIABLE_TRANSFORM
MPDS_MIN_TOLERANCE = _deesse.MPDS_MIN_TOLERANCE
MPDS_MAX_TOLERANCE = _deesse.MPDS_MAX_TOLERANCE
MPDS_MIN_TARGET_INTERVAL_LENGTH = _deesse.MPDS_MIN_TARGET_INTERVAL_LENGTH
MPDS_MAX_NPOSTPROCESSINGPATHMAX = _deesse.MPDS_MAX_NPOSTPROCESSINGPATHMAX
MPDS_MAX_NREALIZATION = _deesse.MPDS_MAX_NREALIZATION
MPDS_MAX_RATIO_SEARCHNEIGHBORHOOD_SIZE_OVER_TI_SIZE = _deesse.MPDS_MAX_RATIO_SEARCHNEIGHBORHOOD_SIZE_OVER_TI_SIZE
MPDS_SEARCHNEIGHBORHOOD_RADIUS_RANGE_FACTOR = _deesse.MPDS_SEARCHNEIGHBORHOOD_RADIUS_RANGE_FACTOR
MPDS_APPROX_RANGE_TOLERANCE = _deesse.MPDS_APPROX_RANGE_TOLERANCE
MPDS_MIN_HOMOTHETY_RATIO = _deesse.MPDS_MIN_HOMOTHETY_RATIO
MPDS_MAX_HOMOTHETY_RATIO = _deesse.MPDS_MAX_HOMOTHETY_RATIO
MPDS_MIN_SOFT_PROBABILITY_NCLASS = _deesse.MPDS_MIN_SOFT_PROBABILITY_NCLASS
MPDS_MAX_SOFT_PROBABILITY_NCLASS = _deesse.MPDS_MAX_SOFT_PROBABILITY_NCLASS
MPDS_MAX_RATIO_TEMPLATE_SIZE_PRODUCT_OVER_IMAGE_SIZE_PRODUCT = _deesse.MPDS_MAX_RATIO_TEMPLATE_SIZE_PRODUCT_OVER_IMAGE_SIZE_PRODUCT
MPDS_TOLEREANCE_ON_SUM_SOFT_PROBABILITY = _deesse.MPDS_TOLEREANCE_ON_SUM_SOFT_PROBABILITY
MPDS_MIN_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD = _deesse.MPDS_MIN_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD
MPDS_MAX_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD = _deesse.MPDS_MAX_PROBABILITY_CONSTRAINT_CONSTANT_THRESHOLD
MPDS_MIN_PROBABILITY_CONSTRAINT_INDICATOR_VAR = _deesse.MPDS_MIN_PROBABILITY_CONSTRAINT_INDICATOR_VAR
MPDS_MAX_PROBABILITY_CONSTRAINT_MISMATCH = _deesse.MPDS_MAX_PROBABILITY_CONSTRAINT_MISMATCH
MPDS_LOCAL_PROBABILITY_CONSTRAINT_TABLE_LENGTH = _deesse.MPDS_LOCAL_PROBABILITY_CONSTRAINT_TABLE_LENGTH
MPDS_MIN_CONNECTIVITY_CONSTRAINT_THRESHOLD = _deesse.MPDS_MIN_CONNECTIVITY_CONSTRAINT_THRESHOLD
MPDS_MAX_CONNECTIVITY_CONSTRAINT_THRESHOLD = _deesse.MPDS_MAX_CONNECTIVITY_CONSTRAINT_THRESHOLD
MPDS_MAX_POWER_PATH_RANDOM_HD_DISTANCE_SUM = _deesse.MPDS_MAX_POWER_PATH_RANDOM_HD_DISTANCE_SUM
MPDS_CHANGE_TRANSFORMATION_STEP = _deesse.MPDS_CHANGE_TRANSFORMATION_STEP
MPDS_NDYNAMICTHRESHOLDPARAMETERS = _deesse.MPDS_NDYNAMICTHRESHOLDPARAMETERS
MPDS_MIN_BLOCK_DATA_LOCAL_VAR = _deesse.MPDS_MIN_BLOCK_DATA_LOCAL_VAR
MPDS_MIN_BLOCK_DATA_KERNEL_BANDWIDTH = _deesse.MPDS_MIN_BLOCK_DATA_KERNEL_BANDWIDTH
MPDS_MAX_BLOCK_DATA_SAMPLED_REGION = _deesse.MPDS_MAX_BLOCK_DATA_SAMPLED_REGION
MPDS_PYRAMID_NLEVEL_MAX = _deesse.MPDS_PYRAMID_NLEVEL_MAX
MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MIN = _deesse.MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MIN
MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MAX = _deesse.MPDS_PYRAMID_FACTOR_MAX_N_NEIGHBOR_MAX
MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MIN = _deesse.MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MIN
MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MAX = _deesse.MPDS_PYRAMID_FACTOR_DISTANCE_THRESHOLD_MAX
MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MIN = _deesse.MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MIN
MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MAX = _deesse.MPDS_PYRAMID_FACTOR_MAX_SCAN_FRACTION_MAX
MPDS_PYRAMID_REDUCTION_FACTOR_MAX = _deesse.MPDS_PYRAMID_REDUCTION_FACTOR_MAX
MPDS_PYRAMID_CATEGORICAL_NCLASS_MAX = _deesse.MPDS_PYRAMID_CATEGORICAL_NCLASS_MAX
MPDS_GAUSSIAN_PYRAMID_RED_TOTAL_WEIGHT_MIN = _deesse.MPDS_GAUSSIAN_PYRAMID_RED_TOTAL_WEIGHT_MIN
MPDS_GAUSSIAN_PYRAMID_EXP_TOTAL_WEIGHT_MIN = _deesse.MPDS_GAUSSIAN_PYRAMID_EXP_TOTAL_WEIGHT_MIN
MPDS_MISSING_CLASSID = _deesse.MPDS_MISSING_CLASSID
MPDS_MIN_MPH_NCLASS = _deesse.MPDS_MIN_MPH_NCLASS
MPDS_MAX_MPH_NCLASS = _deesse.MPDS_MAX_MPH_NCLASS
MPDS_QC_NZONE_MAX = _deesse.MPDS_QC_NZONE_MAX
MPDS_QC_NTRENDVAR_MAX = _deesse.MPDS_QC_NTRENDVAR_MAX
MPDS_PRIME_NUMBER_LIST_SIZE = _deesse.MPDS_PRIME_NUMBER_LIST_SIZE
OUTPUT_FILE_NONE = _deesse.OUTPUT_FILE_NONE
OUTPUT_FILE_ASCII = _deesse.OUTPUT_FILE_ASCII
OUTPUT_FILE_BINARY = _deesse.OUTPUT_FILE_BINARY
class mpds_blockData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_blockData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_blockData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["blockDataUsage"] = _deesse.mpds_blockData_blockDataUsage_set
    __swig_getmethods__["blockDataUsage"] = _deesse.mpds_blockData_blockDataUsage_get
    if _newclass:
        blockDataUsage = _swig_property(_deesse.mpds_blockData_blockDataUsage_get, _deesse.mpds_blockData_blockDataUsage_set)
    __swig_setmethods__["nblock"] = _deesse.mpds_blockData_nblock_set
    __swig_getmethods__["nblock"] = _deesse.mpds_blockData_nblock_get
    if _newclass:
        nblock = _swig_property(_deesse.mpds_blockData_nblock_get, _deesse.mpds_blockData_nblock_set)
    __swig_setmethods__["nnode"] = _deesse.mpds_blockData_nnode_set
    __swig_getmethods__["nnode"] = _deesse.mpds_blockData_nnode_get
    if _newclass:
        nnode = _swig_property(_deesse.mpds_blockData_nnode_get, _deesse.mpds_blockData_nnode_set)
    __swig_setmethods__["ix"] = _deesse.mpds_blockData_ix_set
    __swig_getmethods__["ix"] = _deesse.mpds_blockData_ix_get
    if _newclass:
        ix = _swig_property(_deesse.mpds_blockData_ix_get, _deesse.mpds_blockData_ix_set)
    __swig_setmethods__["iy"] = _deesse.mpds_blockData_iy_set
    __swig_getmethods__["iy"] = _deesse.mpds_blockData_iy_get
    if _newclass:
        iy = _swig_property(_deesse.mpds_blockData_iy_get, _deesse.mpds_blockData_iy_set)
    __swig_setmethods__["iz"] = _deesse.mpds_blockData_iz_set
    __swig_getmethods__["iz"] = _deesse.mpds_blockData_iz_get
    if _newclass:
        iz = _swig_property(_deesse.mpds_blockData_iz_get, _deesse.mpds_blockData_iz_set)
    __swig_setmethods__["value"] = _deesse.mpds_blockData_value_set
    __swig_getmethods__["value"] = _deesse.mpds_blockData_value_get
    if _newclass:
        value = _swig_property(_deesse.mpds_blockData_value_get, _deesse.mpds_blockData_value_set)
    __swig_setmethods__["tolerance"] = _deesse.mpds_blockData_tolerance_set
    __swig_getmethods__["tolerance"] = _deesse.mpds_blockData_tolerance_get
    if _newclass:
        tolerance = _swig_property(_deesse.mpds_blockData_tolerance_get, _deesse.mpds_blockData_tolerance_set)
    __swig_setmethods__["activatePropMin"] = _deesse.mpds_blockData_activatePropMin_set
    __swig_getmethods__["activatePropMin"] = _deesse.mpds_blockData_activatePropMin_get
    if _newclass:
        activatePropMin = _swig_property(_deesse.mpds_blockData_activatePropMin_get, _deesse.mpds_blockData_activatePropMin_set)
    __swig_setmethods__["activatePropMax"] = _deesse.mpds_blockData_activatePropMax_set
    __swig_getmethods__["activatePropMax"] = _deesse.mpds_blockData_activatePropMax_get
    if _newclass:
        activatePropMax = _swig_property(_deesse.mpds_blockData_activatePropMax_get, _deesse.mpds_blockData_activatePropMax_set)

    def __init__(self):
        this = _deesse.new_mpds_blockData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_blockData
    __del__ = lambda self: None
mpds_blockData_swigregister = _deesse.mpds_blockData_swigregister
mpds_blockData_swigregister(mpds_blockData)
cvar = _deesse.cvar
stdout = cvar.stdout


def MPDSFreeBlockData(arg1):
    return _deesse.MPDSFreeBlockData(arg1)
MPDSFreeBlockData = _deesse.MPDSFreeBlockData

def MPDSInitBlockData(arg1):
    return _deesse.MPDSInitBlockData(arg1)
MPDSInitBlockData = _deesse.MPDSInitBlockData

def MPDSPrintBlockData(arg1, arg2, arg3):
    return _deesse.MPDSPrintBlockData(arg1, arg2, arg3)
MPDSPrintBlockData = _deesse.MPDSPrintBlockData

def MPDSValidateBlockData(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidateBlockData(arg1, arg2, arg3, arg4)
MPDSValidateBlockData = _deesse.MPDSValidateBlockData
MPDS_MIN_CLASS_OF_VALUES_NCLASS = _deesse.MPDS_MIN_CLASS_OF_VALUES_NCLASS
MPDS_MAX_CLASS_OF_VALUES_NCLASS = _deesse.MPDS_MAX_CLASS_OF_VALUES_NCLASS
MPDS_MIN_CLASS_OF_VALUES_NINTERVAL = _deesse.MPDS_MIN_CLASS_OF_VALUES_NINTERVAL
MPDS_MAX_CLASS_OF_VALUES_NINTERVAL = _deesse.MPDS_MAX_CLASS_OF_VALUES_NINTERVAL
class mpds_classOfValues(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_classOfValues, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_classOfValues, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nclass"] = _deesse.mpds_classOfValues_nclass_set
    __swig_getmethods__["nclass"] = _deesse.mpds_classOfValues_nclass_get
    if _newclass:
        nclass = _swig_property(_deesse.mpds_classOfValues_nclass_get, _deesse.mpds_classOfValues_nclass_set)
    __swig_setmethods__["ninterval"] = _deesse.mpds_classOfValues_ninterval_set
    __swig_getmethods__["ninterval"] = _deesse.mpds_classOfValues_ninterval_get
    if _newclass:
        ninterval = _swig_property(_deesse.mpds_classOfValues_ninterval_get, _deesse.mpds_classOfValues_ninterval_set)
    __swig_setmethods__["intervalInf"] = _deesse.mpds_classOfValues_intervalInf_set
    __swig_getmethods__["intervalInf"] = _deesse.mpds_classOfValues_intervalInf_get
    if _newclass:
        intervalInf = _swig_property(_deesse.mpds_classOfValues_intervalInf_get, _deesse.mpds_classOfValues_intervalInf_set)
    __swig_setmethods__["intervalSup"] = _deesse.mpds_classOfValues_intervalSup_set
    __swig_getmethods__["intervalSup"] = _deesse.mpds_classOfValues_intervalSup_get
    if _newclass:
        intervalSup = _swig_property(_deesse.mpds_classOfValues_intervalSup_get, _deesse.mpds_classOfValues_intervalSup_set)

    def __init__(self):
        this = _deesse.new_mpds_classOfValues()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_classOfValues
    __del__ = lambda self: None
mpds_classOfValues_swigregister = _deesse.mpds_classOfValues_swigregister
mpds_classOfValues_swigregister(mpds_classOfValues)


def MPDSCopyClassOfValues(arg1, arg2):
    return _deesse.MPDSCopyClassOfValues(arg1, arg2)
MPDSCopyClassOfValues = _deesse.MPDSCopyClassOfValues

def MPDSFreeClassOfValues(arg1):
    return _deesse.MPDSFreeClassOfValues(arg1)
MPDSFreeClassOfValues = _deesse.MPDSFreeClassOfValues

def MPDSInitClassOfValues(arg1):
    return _deesse.MPDSInitClassOfValues(arg1)
MPDSInitClassOfValues = _deesse.MPDSInitClassOfValues

def MPDSPrintClassOfValues(arg1, arg2, arg3):
    return _deesse.MPDSPrintClassOfValues(arg1, arg2, arg3)
MPDSPrintClassOfValues = _deesse.MPDSPrintClassOfValues

def MPDSReadClassOfValues(arg1, arg2):
    return _deesse.MPDSReadClassOfValues(arg1, arg2)
MPDSReadClassOfValues = _deesse.MPDSReadClassOfValues

def MPDSTransformLinearClassOfValues(arg1, arg2, arg3):
    return _deesse.MPDSTransformLinearClassOfValues(arg1, arg2, arg3)
MPDSTransformLinearClassOfValues = _deesse.MPDSTransformLinearClassOfValues

def MPDSValidateClassOfValues(arg1, arg2):
    return _deesse.MPDSValidateClassOfValues(arg1, arg2)
MPDSValidateClassOfValues = _deesse.MPDSValidateClassOfValues
CONNECT_FACE = _deesse.CONNECT_FACE
CONNECT_FACE_EDGE = _deesse.CONNECT_FACE_EDGE
CONNECT_FACE_EDGE_CORNER = _deesse.CONNECT_FACE_EDGE_CORNER
class mpds_connectivity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_connectivity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_connectivity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["connectivityConstraintUsage"] = _deesse.mpds_connectivity_connectivityConstraintUsage_set
    __swig_getmethods__["connectivityConstraintUsage"] = _deesse.mpds_connectivity_connectivityConstraintUsage_get
    if _newclass:
        connectivityConstraintUsage = _swig_property(_deesse.mpds_connectivity_connectivityConstraintUsage_get, _deesse.mpds_connectivity_connectivityConstraintUsage_set)
    __swig_setmethods__["connectivityType"] = _deesse.mpds_connectivity_connectivityType_set
    __swig_getmethods__["connectivityType"] = _deesse.mpds_connectivity_connectivityType_get
    if _newclass:
        connectivityType = _swig_property(_deesse.mpds_connectivity_connectivityType_get, _deesse.mpds_connectivity_connectivityType_set)
    __swig_setmethods__["classOfValues"] = _deesse.mpds_connectivity_classOfValues_set
    __swig_getmethods__["classOfValues"] = _deesse.mpds_connectivity_classOfValues_get
    if _newclass:
        classOfValues = _swig_property(_deesse.mpds_connectivity_classOfValues_get, _deesse.mpds_connectivity_classOfValues_set)
    __swig_setmethods__["varName"] = _deesse.mpds_connectivity_varName_set
    __swig_getmethods__["varName"] = _deesse.mpds_connectivity_varName_get
    if _newclass:
        varName = _swig_property(_deesse.mpds_connectivity_varName_get, _deesse.mpds_connectivity_varName_set)
    __swig_setmethods__["tiAsRefFlag"] = _deesse.mpds_connectivity_tiAsRefFlag_set
    __swig_getmethods__["tiAsRefFlag"] = _deesse.mpds_connectivity_tiAsRefFlag_get
    if _newclass:
        tiAsRefFlag = _swig_property(_deesse.mpds_connectivity_tiAsRefFlag_get, _deesse.mpds_connectivity_tiAsRefFlag_set)
    __swig_setmethods__["refConnectivityImage"] = _deesse.mpds_connectivity_refConnectivityImage_set
    __swig_getmethods__["refConnectivityImage"] = _deesse.mpds_connectivity_refConnectivityImage_get
    if _newclass:
        refConnectivityImage = _swig_property(_deesse.mpds_connectivity_refConnectivityImage_get, _deesse.mpds_connectivity_refConnectivityImage_set)
    __swig_setmethods__["deactivationDistance"] = _deesse.mpds_connectivity_deactivationDistance_set
    __swig_getmethods__["deactivationDistance"] = _deesse.mpds_connectivity_deactivationDistance_get
    if _newclass:
        deactivationDistance = _swig_property(_deesse.mpds_connectivity_deactivationDistance_get, _deesse.mpds_connectivity_deactivationDistance_set)
    __swig_setmethods__["threshold"] = _deesse.mpds_connectivity_threshold_set
    __swig_getmethods__["threshold"] = _deesse.mpds_connectivity_threshold_get
    if _newclass:
        threshold = _swig_property(_deesse.mpds_connectivity_threshold_get, _deesse.mpds_connectivity_threshold_set)

    def __init__(self):
        this = _deesse.new_mpds_connectivity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_connectivity
    __del__ = lambda self: None
mpds_connectivity_swigregister = _deesse.mpds_connectivity_swigregister
mpds_connectivity_swigregister(mpds_connectivity)


def MPDSFreeConnectivity(arg1):
    return _deesse.MPDSFreeConnectivity(arg1)
MPDSFreeConnectivity = _deesse.MPDSFreeConnectivity

def MPDSImageToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _deesse.MPDSImageToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
MPDSImageToImageWithConnectivityLabel = _deesse.MPDSImageToImageWithConnectivityLabel

def MPDSInitConnectivity(arg1):
    return _deesse.MPDSInitConnectivity(arg1)
MPDSInitConnectivity = _deesse.MPDSInitConnectivity

def MPDSPointSetToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _deesse.MPDSPointSetToImageWithConnectivityLabel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
MPDSPointSetToImageWithConnectivityLabel = _deesse.MPDSPointSetToImageWithConnectivityLabel

def MPDSPrintConnectivity(arg1, arg2, arg3):
    return _deesse.MPDSPrintConnectivity(arg1, arg2, arg3)
MPDSPrintConnectivity = _deesse.MPDSPrintConnectivity

def MPDSValidateConnectivity(arg1, arg2):
    return _deesse.MPDSValidateConnectivity(arg1, arg2)
MPDSValidateConnectivity = _deesse.MPDSValidateConnectivity
class mpds_grid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_grid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_grid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nx"] = _deesse.mpds_grid_nx_set
    __swig_getmethods__["nx"] = _deesse.mpds_grid_nx_get
    if _newclass:
        nx = _swig_property(_deesse.mpds_grid_nx_get, _deesse.mpds_grid_nx_set)
    __swig_setmethods__["ny"] = _deesse.mpds_grid_ny_set
    __swig_getmethods__["ny"] = _deesse.mpds_grid_ny_get
    if _newclass:
        ny = _swig_property(_deesse.mpds_grid_ny_get, _deesse.mpds_grid_ny_set)
    __swig_setmethods__["nz"] = _deesse.mpds_grid_nz_set
    __swig_getmethods__["nz"] = _deesse.mpds_grid_nz_get
    if _newclass:
        nz = _swig_property(_deesse.mpds_grid_nz_get, _deesse.mpds_grid_nz_set)
    __swig_setmethods__["sx"] = _deesse.mpds_grid_sx_set
    __swig_getmethods__["sx"] = _deesse.mpds_grid_sx_get
    if _newclass:
        sx = _swig_property(_deesse.mpds_grid_sx_get, _deesse.mpds_grid_sx_set)
    __swig_setmethods__["sy"] = _deesse.mpds_grid_sy_set
    __swig_getmethods__["sy"] = _deesse.mpds_grid_sy_get
    if _newclass:
        sy = _swig_property(_deesse.mpds_grid_sy_get, _deesse.mpds_grid_sy_set)
    __swig_setmethods__["sz"] = _deesse.mpds_grid_sz_set
    __swig_getmethods__["sz"] = _deesse.mpds_grid_sz_get
    if _newclass:
        sz = _swig_property(_deesse.mpds_grid_sz_get, _deesse.mpds_grid_sz_set)
    __swig_setmethods__["ox"] = _deesse.mpds_grid_ox_set
    __swig_getmethods__["ox"] = _deesse.mpds_grid_ox_get
    if _newclass:
        ox = _swig_property(_deesse.mpds_grid_ox_get, _deesse.mpds_grid_ox_set)
    __swig_setmethods__["oy"] = _deesse.mpds_grid_oy_set
    __swig_getmethods__["oy"] = _deesse.mpds_grid_oy_get
    if _newclass:
        oy = _swig_property(_deesse.mpds_grid_oy_get, _deesse.mpds_grid_oy_set)
    __swig_setmethods__["oz"] = _deesse.mpds_grid_oz_set
    __swig_getmethods__["oz"] = _deesse.mpds_grid_oz_get
    if _newclass:
        oz = _swig_property(_deesse.mpds_grid_oz_get, _deesse.mpds_grid_oz_set)
    __swig_setmethods__["nxy"] = _deesse.mpds_grid_nxy_set
    __swig_getmethods__["nxy"] = _deesse.mpds_grid_nxy_get
    if _newclass:
        nxy = _swig_property(_deesse.mpds_grid_nxy_get, _deesse.mpds_grid_nxy_set)
    __swig_setmethods__["nxyz"] = _deesse.mpds_grid_nxyz_set
    __swig_getmethods__["nxyz"] = _deesse.mpds_grid_nxyz_get
    if _newclass:
        nxyz = _swig_property(_deesse.mpds_grid_nxyz_get, _deesse.mpds_grid_nxyz_set)

    def __init__(self):
        this = _deesse.new_mpds_grid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_grid
    __del__ = lambda self: None
mpds_grid_swigregister = _deesse.mpds_grid_swigregister
mpds_grid_swigregister(mpds_grid)


def MPDSCmpGrid(arg1, arg2):
    return _deesse.MPDSCmpGrid(arg1, arg2)
MPDSCmpGrid = _deesse.MPDSCmpGrid

def MPDSCopyGrid(arg1, arg2):
    return _deesse.MPDSCopyGrid(arg1, arg2)
MPDSCopyGrid = _deesse.MPDSCopyGrid

def MPDSGridCoordToId(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGridCoordToId(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSGridCoordToId = _deesse.MPDSGridCoordToId

def MPDSGridIdToCoord(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGridIdToCoord(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSGridIdToCoord = _deesse.MPDSGridIdToCoord

def MPDSInitGrid(arg1):
    return _deesse.MPDSInitGrid(arg1)
MPDSInitGrid = _deesse.MPDSInitGrid

def MPDSPrintGrid(arg1, arg2, arg3):
    return _deesse.MPDSPrintGrid(arg1, arg2, arg3)
MPDSPrintGrid = _deesse.MPDSPrintGrid

def MPDSReadGrid(arg1, arg2):
    return _deesse.MPDSReadGrid(arg1, arg2)
MPDSReadGrid = _deesse.MPDSReadGrid

def MPDSValidateGrid(arg1, arg2):
    return _deesse.MPDSValidateGrid(arg1, arg2)
MPDSValidateGrid = _deesse.MPDSValidateGrid
class mpds_image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_image, name)
    __repr__ = _swig_repr
    __swig_setmethods__["grid"] = _deesse.mpds_image_grid_set
    __swig_getmethods__["grid"] = _deesse.mpds_image_grid_get
    if _newclass:
        grid = _swig_property(_deesse.mpds_image_grid_get, _deesse.mpds_image_grid_set)
    __swig_setmethods__["nvar"] = _deesse.mpds_image_nvar_set
    __swig_getmethods__["nvar"] = _deesse.mpds_image_nvar_get
    if _newclass:
        nvar = _swig_property(_deesse.mpds_image_nvar_get, _deesse.mpds_image_nvar_set)
    __swig_setmethods__["nxyzv"] = _deesse.mpds_image_nxyzv_set
    __swig_getmethods__["nxyzv"] = _deesse.mpds_image_nxyzv_get
    if _newclass:
        nxyzv = _swig_property(_deesse.mpds_image_nxyzv_get, _deesse.mpds_image_nxyzv_set)
    __swig_setmethods__["varName"] = _deesse.mpds_image_varName_set
    __swig_getmethods__["varName"] = _deesse.mpds_image_varName_get
    if _newclass:
        varName = _swig_property(_deesse.mpds_image_varName_get, _deesse.mpds_image_varName_set)
    __swig_setmethods__["var"] = _deesse.mpds_image_var_set
    __swig_getmethods__["var"] = _deesse.mpds_image_var_get
    if _newclass:
        var = _swig_property(_deesse.mpds_image_var_get, _deesse.mpds_image_var_set)

    def __init__(self):
        this = _deesse.new_mpds_image()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_image
    __del__ = lambda self: None
mpds_image_swigregister = _deesse.mpds_image_swigregister
mpds_image_swigregister(mpds_image)


def MPDSCopyImage(arg1, arg2):
    return _deesse.MPDSCopyImage(arg1, arg2)
MPDSCopyImage = _deesse.MPDSCopyImage

def MPDSFreeImage(arg1):
    return _deesse.MPDSFreeImage(arg1)
MPDSFreeImage = _deesse.MPDSFreeImage

def MPDSGetImageOneVarValueIndex(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSGetImageOneVarValueIndex(arg1, arg2, arg3, arg4, arg5)
MPDSGetImageOneVarValueIndex = _deesse.MPDSGetImageOneVarValueIndex

def MPDSGetImageNumberVarValueMissing(arg1, arg2):
    return _deesse.MPDSGetImageNumberVarValueMissing(arg1, arg2)
MPDSGetImageNumberVarValueMissing = _deesse.MPDSGetImageNumberVarValueMissing

def MPDSGetImageOneVarValueMean(arg1, arg2, arg3):
    return _deesse.MPDSGetImageOneVarValueMean(arg1, arg2, arg3)
MPDSGetImageOneVarValueMean = _deesse.MPDSGetImageOneVarValueMean

def MPDSGetImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSGetImageOneVarValuePdf = _deesse.MPDSGetImageOneVarValuePdf

def MPDSGetImageOneVarValueRange(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetImageOneVarValueRange(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSGetImageOneVarValueRange = _deesse.MPDSGetImageOneVarValueRange

def MPDSGetImageOneVarValueSD(arg1, arg2, arg3, arg4):
    return _deesse.MPDSGetImageOneVarValueSD(arg1, arg2, arg3, arg4)
MPDSGetImageOneVarValueSD = _deesse.MPDSGetImageOneVarValueSD

def MPDSGetImageVarStats(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetImageVarStats(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSGetImageVarStats = _deesse.MPDSGetImageVarStats

def MPDSGetImageVarStatsLocal(arg1, arg2, arg3, arg4):
    return _deesse.MPDSGetImageVarStatsLocal(arg1, arg2, arg3, arg4)
MPDSGetImageVarStatsLocal = _deesse.MPDSGetImageVarStatsLocal

def MPDSGetImageVarValueMean(arg1, arg2):
    return _deesse.MPDSGetImageVarValueMean(arg1, arg2)
MPDSGetImageVarValueMean = _deesse.MPDSGetImageVarValueMean

def MPDSGetImageVarValuePdf(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSGetImageVarValuePdf(arg1, arg2, arg3, arg4, arg5)
MPDSGetImageVarValuePdf = _deesse.MPDSGetImageVarValuePdf

def MPDSGetImageVarValueRange(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSGetImageVarValueRange(arg1, arg2, arg3, arg4, arg5)
MPDSGetImageVarValueRange = _deesse.MPDSGetImageVarValueRange

def MPDSGetImageVarValueSD(arg1, arg2, arg3):
    return _deesse.MPDSGetImageVarValueSD(arg1, arg2, arg3)
MPDSGetImageVarValueSD = _deesse.MPDSGetImageVarValueSD

def MPDSGetImageVarVectorMissing(arg1, arg2, arg3):
    return _deesse.MPDSGetImageVarVectorMissing(arg1, arg2, arg3)
MPDSGetImageVarVectorMissing = _deesse.MPDSGetImageVarVectorMissing

def MPDSGetNImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSGetNImageOneVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
MPDSGetNImageOneVarValuePdf = _deesse.MPDSGetNImageOneVarValuePdf

def MPDSGetNImageVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetNImageVarValuePdf(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSGetNImageVarValuePdf = _deesse.MPDSGetNImageVarValuePdf

def MPDSImageToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSImageToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
MPDSImageToImage = _deesse.MPDSImageToImage

def MPDSInitImage(arg1):
    return _deesse.MPDSInitImage(arg1)
MPDSInitImage = _deesse.MPDSInitImage

def MPDSMallocImage(arg1, arg2, arg3):
    return _deesse.MPDSMallocImage(arg1, arg2, arg3)
MPDSMallocImage = _deesse.MPDSMallocImage

def MPDSPrintImage(arg1, arg2, arg3):
    return _deesse.MPDSPrintImage(arg1, arg2, arg3)
MPDSPrintImage = _deesse.MPDSPrintImage

def MPDSPrintImageInfo(arg1, arg2, arg3, arg4):
    return _deesse.MPDSPrintImageInfo(arg1, arg2, arg3, arg4)
MPDSPrintImageInfo = _deesse.MPDSPrintImageInfo

def MPDSReadImage(arg1, arg2, arg3):
    return _deesse.MPDSReadImage(arg1, arg2, arg3)
MPDSReadImage = _deesse.MPDSReadImage

def MPDSReadImageGslibBinary(arg1, arg2):
    return _deesse.MPDSReadImageGslibBinary(arg1, arg2)
MPDSReadImageGslibBinary = _deesse.MPDSReadImageGslibBinary

def MPDSTransformLinearImageVar(arg1, arg2, arg3, arg4):
    return _deesse.MPDSTransformLinearImageVar(arg1, arg2, arg3, arg4)
MPDSTransformLinearImageVar = _deesse.MPDSTransformLinearImageVar

def MPDSTransformExplicitImageVar(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSTransformExplicitImageVar(arg1, arg2, arg3, arg4, arg5)
MPDSTransformExplicitImageVar = _deesse.MPDSTransformExplicitImageVar

def MPDSValidateImage(arg1, arg2):
    return _deesse.MPDSValidateImage(arg1, arg2)
MPDSValidateImage = _deesse.MPDSValidateImage

def MPDSWriteImage(arg1, arg2, arg3, arg4):
    return _deesse.MPDSWriteImage(arg1, arg2, arg3, arg4)
MPDSWriteImage = _deesse.MPDSWriteImage

def MPDSWriteImageGslibBinary(arg1, arg2):
    return _deesse.MPDSWriteImageGslibBinary(arg1, arg2)
MPDSWriteImageGslibBinary = _deesse.MPDSWriteImageGslibBinary
class mpds_pointSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_pointSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_pointSet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["npoint"] = _deesse.mpds_pointSet_npoint_set
    __swig_getmethods__["npoint"] = _deesse.mpds_pointSet_npoint_get
    if _newclass:
        npoint = _swig_property(_deesse.mpds_pointSet_npoint_get, _deesse.mpds_pointSet_npoint_set)
    __swig_setmethods__["x"] = _deesse.mpds_pointSet_x_set
    __swig_getmethods__["x"] = _deesse.mpds_pointSet_x_get
    if _newclass:
        x = _swig_property(_deesse.mpds_pointSet_x_get, _deesse.mpds_pointSet_x_set)
    __swig_setmethods__["y"] = _deesse.mpds_pointSet_y_set
    __swig_getmethods__["y"] = _deesse.mpds_pointSet_y_get
    if _newclass:
        y = _swig_property(_deesse.mpds_pointSet_y_get, _deesse.mpds_pointSet_y_set)
    __swig_setmethods__["z"] = _deesse.mpds_pointSet_z_set
    __swig_getmethods__["z"] = _deesse.mpds_pointSet_z_get
    if _newclass:
        z = _swig_property(_deesse.mpds_pointSet_z_get, _deesse.mpds_pointSet_z_set)
    __swig_setmethods__["nvar"] = _deesse.mpds_pointSet_nvar_set
    __swig_getmethods__["nvar"] = _deesse.mpds_pointSet_nvar_get
    if _newclass:
        nvar = _swig_property(_deesse.mpds_pointSet_nvar_get, _deesse.mpds_pointSet_nvar_set)
    __swig_setmethods__["varName"] = _deesse.mpds_pointSet_varName_set
    __swig_getmethods__["varName"] = _deesse.mpds_pointSet_varName_get
    if _newclass:
        varName = _swig_property(_deesse.mpds_pointSet_varName_get, _deesse.mpds_pointSet_varName_set)
    __swig_setmethods__["var"] = _deesse.mpds_pointSet_var_set
    __swig_getmethods__["var"] = _deesse.mpds_pointSet_var_get
    if _newclass:
        var = _swig_property(_deesse.mpds_pointSet_var_get, _deesse.mpds_pointSet_var_set)

    def __init__(self):
        this = _deesse.new_mpds_pointSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_pointSet
    __del__ = lambda self: None
mpds_pointSet_swigregister = _deesse.mpds_pointSet_swigregister
mpds_pointSet_swigregister(mpds_pointSet)


def MPDSCopyPointSet(arg1, arg2):
    return _deesse.MPDSCopyPointSet(arg1, arg2)
MPDSCopyPointSet = _deesse.MPDSCopyPointSet

def MPDSFreePointSet(arg1):
    return _deesse.MPDSFreePointSet(arg1)
MPDSFreePointSet = _deesse.MPDSFreePointSet

def MPDSGetIndexInGridForPointSet(arg1, arg2, arg3, arg4):
    return _deesse.MPDSGetIndexInGridForPointSet(arg1, arg2, arg3, arg4)
MPDSGetIndexInGridForPointSet = _deesse.MPDSGetIndexInGridForPointSet

def MPDSGetPointSetInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _deesse.MPDSGetPointSetInfo(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
MPDSGetPointSetInfo = _deesse.MPDSGetPointSetInfo

def MPDSGetXYZIndexInGridForPointSet(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSGetXYZIndexInGridForPointSet(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSGetXYZIndexInGridForPointSet = _deesse.MPDSGetXYZIndexInGridForPointSet

def MPDSImageToPointSet(arg1, arg2):
    return _deesse.MPDSImageToPointSet(arg1, arg2)
MPDSImageToPointSet = _deesse.MPDSImageToPointSet

def MPDSInitPointSet(arg1):
    return _deesse.MPDSInitPointSet(arg1)
MPDSInitPointSet = _deesse.MPDSInitPointSet

def MPDSMallocPointSet(arg1, arg2, arg3):
    return _deesse.MPDSMallocPointSet(arg1, arg2, arg3)
MPDSMallocPointSet = _deesse.MPDSMallocPointSet

def MPDSPointSetToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSPointSetToImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
MPDSPointSetToImage = _deesse.MPDSPointSetToImage

def MPDSPrintPointSet(arg1, arg2, arg3):
    return _deesse.MPDSPrintPointSet(arg1, arg2, arg3)
MPDSPrintPointSet = _deesse.MPDSPrintPointSet

def MPDSPrintPointSetInfo(arg1, arg2, arg3):
    return _deesse.MPDSPrintPointSetInfo(arg1, arg2, arg3)
MPDSPrintPointSetInfo = _deesse.MPDSPrintPointSetInfo

def MPDSReadPointSet(arg1, arg2):
    return _deesse.MPDSReadPointSet(arg1, arg2)
MPDSReadPointSet = _deesse.MPDSReadPointSet

def MPDSValidatePointSet(arg1, arg2):
    return _deesse.MPDSValidatePointSet(arg1, arg2)
MPDSValidatePointSet = _deesse.MPDSValidatePointSet

def MPDSWritePointSet(arg1, arg2, arg3, arg4):
    return _deesse.MPDSWritePointSet(arg1, arg2, arg3, arg4)
MPDSWritePointSet = _deesse.MPDSWritePointSet
MPDS_WARNING_MSG_00001 = _deesse.MPDS_WARNING_MSG_00001
MPDS_WARNING_MSG_00002 = _deesse.MPDS_WARNING_MSG_00002
MPDS_WARNING_MSG_00003 = _deesse.MPDS_WARNING_MSG_00003
MPDS_WARNING_MSG_00010 = _deesse.MPDS_WARNING_MSG_00010
MPDS_WARNING_MSG_00020 = _deesse.MPDS_WARNING_MSG_00020
MPDS_WARNING_MSG_00021 = _deesse.MPDS_WARNING_MSG_00021
MPDS_WARNING_MSG_00025 = _deesse.MPDS_WARNING_MSG_00025
MPDS_WARNING_MSG_00027 = _deesse.MPDS_WARNING_MSG_00027
MPDS_WARNING_MSG_00026 = _deesse.MPDS_WARNING_MSG_00026
MPDS_WARNING_MSG_00030 = _deesse.MPDS_WARNING_MSG_00030
MPDS_WARNING_MSG_00031 = _deesse.MPDS_WARNING_MSG_00031
MPDS_WARNING_MSG_00032 = _deesse.MPDS_WARNING_MSG_00032
MPDS_WARNING_MSG_00033 = _deesse.MPDS_WARNING_MSG_00033
MPDS_WARNING_MSG_00034 = _deesse.MPDS_WARNING_MSG_00034
MPDS_WARNING_MSG_00035 = _deesse.MPDS_WARNING_MSG_00035
MPDS_WARNING_MSG_00036 = _deesse.MPDS_WARNING_MSG_00036
MPDS_WARNING_MSG_00038 = _deesse.MPDS_WARNING_MSG_00038
MPDS_WARNING_MSG_00039 = _deesse.MPDS_WARNING_MSG_00039
MPDS_WARNING_MSG_00040 = _deesse.MPDS_WARNING_MSG_00040
MPDS_WARNING_MSG_00041 = _deesse.MPDS_WARNING_MSG_00041
MPDS_WARNING_MSG_00042 = _deesse.MPDS_WARNING_MSG_00042
MPDS_WARNING_MSG_00043 = _deesse.MPDS_WARNING_MSG_00043
MPDS_WARNING_MSG_00044 = _deesse.MPDS_WARNING_MSG_00044
MPDS_WARNING_MSG_00045 = _deesse.MPDS_WARNING_MSG_00045
MPDS_WARNING_MSG_00046 = _deesse.MPDS_WARNING_MSG_00046
MPDS_WARNING_MSG_00050 = _deesse.MPDS_WARNING_MSG_00050
MPDS_WARNING_MSG_00051 = _deesse.MPDS_WARNING_MSG_00051
MPDS_WARNING_MSG_00055 = _deesse.MPDS_WARNING_MSG_00055
MPDS_WARNING_MSG_00080 = _deesse.MPDS_WARNING_MSG_00080
MPDS_WARNING_MSG_00100 = _deesse.MPDS_WARNING_MSG_00100
MPDS_WARNING_MSG_00110 = _deesse.MPDS_WARNING_MSG_00110
MPDS_WARNING_MSG_00115 = _deesse.MPDS_WARNING_MSG_00115
MPDS_WARNING_MSG_00120 = _deesse.MPDS_WARNING_MSG_00120
MPDS_WARNING_MSG_00150 = _deesse.MPDS_WARNING_MSG_00150
MPDS_WARNING_MSG_00160 = _deesse.MPDS_WARNING_MSG_00160
MPDS_WARNING_MSG_08001 = _deesse.MPDS_WARNING_MSG_08001
class mpds_progressMonitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_progressMonitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_progressMonitor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["warningNumber"] = _deesse.mpds_progressMonitor_warningNumber_set
    __swig_getmethods__["warningNumber"] = _deesse.mpds_progressMonitor_warningNumber_get
    if _newclass:
        warningNumber = _swig_property(_deesse.mpds_progressMonitor_warningNumber_get, _deesse.mpds_progressMonitor_warningNumber_set)
    __swig_setmethods__["nrealization"] = _deesse.mpds_progressMonitor_nrealization_set
    __swig_getmethods__["nrealization"] = _deesse.mpds_progressMonitor_nrealization_get
    if _newclass:
        nrealization = _swig_property(_deesse.mpds_progressMonitor_nrealization_get, _deesse.mpds_progressMonitor_nrealization_set)
    __swig_setmethods__["currentRealization"] = _deesse.mpds_progressMonitor_currentRealization_set
    __swig_getmethods__["currentRealization"] = _deesse.mpds_progressMonitor_currentRealization_get
    if _newclass:
        currentRealization = _swig_property(_deesse.mpds_progressMonitor_currentRealization_get, _deesse.mpds_progressMonitor_currentRealization_set)
    __swig_setmethods__["currentRealizationProgress"] = _deesse.mpds_progressMonitor_currentRealizationProgress_set
    __swig_getmethods__["currentRealizationProgress"] = _deesse.mpds_progressMonitor_currentRealizationProgress_get
    if _newclass:
        currentRealizationProgress = _swig_property(_deesse.mpds_progressMonitor_currentRealizationProgress_get, _deesse.mpds_progressMonitor_currentRealizationProgress_set)
    __swig_setmethods__["allRealizationProgress"] = _deesse.mpds_progressMonitor_allRealizationProgress_set
    __swig_getmethods__["allRealizationProgress"] = _deesse.mpds_progressMonitor_allRealizationProgress_get
    if _newclass:
        allRealizationProgress = _swig_property(_deesse.mpds_progressMonitor_allRealizationProgress_get, _deesse.mpds_progressMonitor_allRealizationProgress_set)
    __swig_setmethods__["abortedJobFlag"] = _deesse.mpds_progressMonitor_abortedJobFlag_set
    __swig_getmethods__["abortedJobFlag"] = _deesse.mpds_progressMonitor_abortedJobFlag_get
    if _newclass:
        abortedJobFlag = _swig_property(_deesse.mpds_progressMonitor_abortedJobFlag_get, _deesse.mpds_progressMonitor_abortedJobFlag_set)

    def __init__(self):
        this = _deesse.new_mpds_progressMonitor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_progressMonitor
    __del__ = lambda self: None
mpds_progressMonitor_swigregister = _deesse.mpds_progressMonitor_swigregister
mpds_progressMonitor_swigregister(mpds_progressMonitor)


def MPDSGetWarningMessage(arg1):
    return _deesse.MPDSGetWarningMessage(arg1)
MPDSGetWarningMessage = _deesse.MPDSGetWarningMessage

def MPDSInitProgressMonitor(arg1):
    return _deesse.MPDSInitProgressMonitor(arg1)
MPDSInitProgressMonitor = _deesse.MPDSInitProgressMonitor

def MPDSUpdateProgressMonitorAllGI(arg1):
    return _deesse.MPDSUpdateProgressMonitorAllGI(arg1)
MPDSUpdateProgressMonitorAllGI = _deesse.MPDSUpdateProgressMonitorAllGI

def MPDSUpdateProgressMonitorAllStdout(arg1):
    return _deesse.MPDSUpdateProgressMonitorAllStdout(arg1)
MPDSUpdateProgressMonitorAllStdout = _deesse.MPDSUpdateProgressMonitorAllStdout

def MPDSUpdateProgressMonitorGI(arg1):
    return _deesse.MPDSUpdateProgressMonitorGI(arg1)
MPDSUpdateProgressMonitorGI = _deesse.MPDSUpdateProgressMonitorGI

def MPDSUpdateProgressMonitorStdout(arg1):
    return _deesse.MPDSUpdateProgressMonitorStdout(arg1)
MPDSUpdateProgressMonitorStdout = _deesse.MPDSUpdateProgressMonitorStdout
PYRAMID_SIM_NONE = _deesse.PYRAMID_SIM_NONE
PYRAMID_SIM_HIERARCHICAL = _deesse.PYRAMID_SIM_HIERARCHICAL
PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION = _deesse.PYRAMID_SIM_HIERARCHICAL_USING_EXPANSION
PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE = _deesse.PYRAMID_SIM_ALL_LEVEL_ONE_BY_ONE
PYRAMID_NONE = _deesse.PYRAMID_NONE
PYRAMID_CONTINUOUS = _deesse.PYRAMID_CONTINUOUS
PYRAMID_CATEGORICAL_AUTO = _deesse.PYRAMID_CATEGORICAL_AUTO
PYRAMID_CATEGORICAL_CUSTOM = _deesse.PYRAMID_CATEGORICAL_CUSTOM
PYRAMID_CATEGORICAL_TO_CONTINUOUS = _deesse.PYRAMID_CATEGORICAL_TO_CONTINUOUS
class mpds_pyramidGeneralParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_pyramidGeneralParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_pyramidGeneralParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["npyramidLevel"] = _deesse.mpds_pyramidGeneralParameters_npyramidLevel_set
    __swig_getmethods__["npyramidLevel"] = _deesse.mpds_pyramidGeneralParameters_npyramidLevel_get
    if _newclass:
        npyramidLevel = _swig_property(_deesse.mpds_pyramidGeneralParameters_npyramidLevel_get, _deesse.mpds_pyramidGeneralParameters_npyramidLevel_set)
    __swig_setmethods__["kx"] = _deesse.mpds_pyramidGeneralParameters_kx_set
    __swig_getmethods__["kx"] = _deesse.mpds_pyramidGeneralParameters_kx_get
    if _newclass:
        kx = _swig_property(_deesse.mpds_pyramidGeneralParameters_kx_get, _deesse.mpds_pyramidGeneralParameters_kx_set)
    __swig_setmethods__["ky"] = _deesse.mpds_pyramidGeneralParameters_ky_set
    __swig_getmethods__["ky"] = _deesse.mpds_pyramidGeneralParameters_ky_get
    if _newclass:
        ky = _swig_property(_deesse.mpds_pyramidGeneralParameters_ky_get, _deesse.mpds_pyramidGeneralParameters_ky_set)
    __swig_setmethods__["kz"] = _deesse.mpds_pyramidGeneralParameters_kz_set
    __swig_getmethods__["kz"] = _deesse.mpds_pyramidGeneralParameters_kz_get
    if _newclass:
        kz = _swig_property(_deesse.mpds_pyramidGeneralParameters_kz_get, _deesse.mpds_pyramidGeneralParameters_kz_set)
    __swig_setmethods__["pyramidSimulationMode"] = _deesse.mpds_pyramidGeneralParameters_pyramidSimulationMode_set
    __swig_getmethods__["pyramidSimulationMode"] = _deesse.mpds_pyramidGeneralParameters_pyramidSimulationMode_get
    if _newclass:
        pyramidSimulationMode = _swig_property(_deesse.mpds_pyramidGeneralParameters_pyramidSimulationMode_get, _deesse.mpds_pyramidGeneralParameters_pyramidSimulationMode_set)
    __swig_setmethods__["factorNneighboringNode"] = _deesse.mpds_pyramidGeneralParameters_factorNneighboringNode_set
    __swig_getmethods__["factorNneighboringNode"] = _deesse.mpds_pyramidGeneralParameters_factorNneighboringNode_get
    if _newclass:
        factorNneighboringNode = _swig_property(_deesse.mpds_pyramidGeneralParameters_factorNneighboringNode_get, _deesse.mpds_pyramidGeneralParameters_factorNneighboringNode_set)
    __swig_setmethods__["factorDistanceThreshold"] = _deesse.mpds_pyramidGeneralParameters_factorDistanceThreshold_set
    __swig_getmethods__["factorDistanceThreshold"] = _deesse.mpds_pyramidGeneralParameters_factorDistanceThreshold_get
    if _newclass:
        factorDistanceThreshold = _swig_property(_deesse.mpds_pyramidGeneralParameters_factorDistanceThreshold_get, _deesse.mpds_pyramidGeneralParameters_factorDistanceThreshold_set)
    __swig_setmethods__["factorMaxScanFraction"] = _deesse.mpds_pyramidGeneralParameters_factorMaxScanFraction_set
    __swig_getmethods__["factorMaxScanFraction"] = _deesse.mpds_pyramidGeneralParameters_factorMaxScanFraction_get
    if _newclass:
        factorMaxScanFraction = _swig_property(_deesse.mpds_pyramidGeneralParameters_factorMaxScanFraction_get, _deesse.mpds_pyramidGeneralParameters_factorMaxScanFraction_set)

    def __init__(self):
        this = _deesse.new_mpds_pyramidGeneralParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_pyramidGeneralParameters
    __del__ = lambda self: None
mpds_pyramidGeneralParameters_swigregister = _deesse.mpds_pyramidGeneralParameters_swigregister
mpds_pyramidGeneralParameters_swigregister(mpds_pyramidGeneralParameters)

class mpds_pyramidParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_pyramidParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_pyramidParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nlevel"] = _deesse.mpds_pyramidParameters_nlevel_set
    __swig_getmethods__["nlevel"] = _deesse.mpds_pyramidParameters_nlevel_get
    if _newclass:
        nlevel = _swig_property(_deesse.mpds_pyramidParameters_nlevel_get, _deesse.mpds_pyramidParameters_nlevel_set)
    __swig_setmethods__["pyramidType"] = _deesse.mpds_pyramidParameters_pyramidType_set
    __swig_getmethods__["pyramidType"] = _deesse.mpds_pyramidParameters_pyramidType_get
    if _newclass:
        pyramidType = _swig_property(_deesse.mpds_pyramidParameters_pyramidType_get, _deesse.mpds_pyramidParameters_pyramidType_set)
    __swig_setmethods__["classOfValues"] = _deesse.mpds_pyramidParameters_classOfValues_set
    __swig_getmethods__["classOfValues"] = _deesse.mpds_pyramidParameters_classOfValues_get
    if _newclass:
        classOfValues = _swig_property(_deesse.mpds_pyramidParameters_classOfValues_get, _deesse.mpds_pyramidParameters_classOfValues_set)

    def __init__(self):
        this = _deesse.new_mpds_pyramidParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_pyramidParameters
    __del__ = lambda self: None
mpds_pyramidParameters_swigregister = _deesse.mpds_pyramidParameters_swigregister
mpds_pyramidParameters_swigregister(mpds_pyramidParameters)


def MPDSCopyPyramidGeneralParameters(arg1, arg2):
    return _deesse.MPDSCopyPyramidGeneralParameters(arg1, arg2)
MPDSCopyPyramidGeneralParameters = _deesse.MPDSCopyPyramidGeneralParameters

def MPDSCopyPyramidParameters(arg1, arg2):
    return _deesse.MPDSCopyPyramidParameters(arg1, arg2)
MPDSCopyPyramidParameters = _deesse.MPDSCopyPyramidParameters

def MPDSFreePyramidGeneralParameters(arg1):
    return _deesse.MPDSFreePyramidGeneralParameters(arg1)
MPDSFreePyramidGeneralParameters = _deesse.MPDSFreePyramidGeneralParameters

def MPDSFreePyramidParameters(arg1):
    return _deesse.MPDSFreePyramidParameters(arg1)
MPDSFreePyramidParameters = _deesse.MPDSFreePyramidParameters

def MPDSInitPyramidGeneralParameters(arg1):
    return _deesse.MPDSInitPyramidGeneralParameters(arg1)
MPDSInitPyramidGeneralParameters = _deesse.MPDSInitPyramidGeneralParameters

def MPDSInitPyramidParameters(arg1):
    return _deesse.MPDSInitPyramidParameters(arg1)
MPDSInitPyramidParameters = _deesse.MPDSInitPyramidParameters

def MPDSPrintPyramidGeneralParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintPyramidGeneralParameters(arg1, arg2, arg3)
MPDSPrintPyramidGeneralParameters = _deesse.MPDSPrintPyramidGeneralParameters

def MPDSPrintPyramidParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintPyramidParameters(arg1, arg2, arg3)
MPDSPrintPyramidParameters = _deesse.MPDSPrintPyramidParameters

def MPDSReadPyramidParameters(arg1, arg2):
    return _deesse.MPDSReadPyramidParameters(arg1, arg2)
MPDSReadPyramidParameters = _deesse.MPDSReadPyramidParameters

def MPDSValidatePyramidGeneralParameters(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidatePyramidGeneralParameters(arg1, arg2, arg3, arg4)
MPDSValidatePyramidGeneralParameters = _deesse.MPDSValidatePyramidGeneralParameters

def MPDSValidatePyramidParameters(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidatePyramidParameters(arg1, arg2, arg3, arg4)
MPDSValidatePyramidParameters = _deesse.MPDSValidatePyramidParameters
SEARCHNEIGHBORHOOD_RADIUS_LARGE_DEFAULT = _deesse.SEARCHNEIGHBORHOOD_RADIUS_LARGE_DEFAULT
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_DEFAULT = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_DEFAULT
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XY = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XY
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XZ = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XZ
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_YZ = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_YZ
SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XYZ = _deesse.SEARCHNEIGHBORHOOD_RADIUS_TI_RANGE_XYZ
SEARCHNEIGHBORHOOD_RADIUS_MANUAL = _deesse.SEARCHNEIGHBORHOOD_RADIUS_MANUAL
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_ONE = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_ONE
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XY = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XY
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XZ = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XZ
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_YZ = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_YZ
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XYZ = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_RADIUS_XYZ
SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_MANUAL = _deesse.SEARCHNEIGHBORHOOD_ANISOTROPY_RATIO_MANUAL
class mpds_searchNeighborhoodParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_searchNeighborhoodParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_searchNeighborhoodParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radiusMode"] = _deesse.mpds_searchNeighborhoodParameters_radiusMode_set
    __swig_getmethods__["radiusMode"] = _deesse.mpds_searchNeighborhoodParameters_radiusMode_get
    if _newclass:
        radiusMode = _swig_property(_deesse.mpds_searchNeighborhoodParameters_radiusMode_get, _deesse.mpds_searchNeighborhoodParameters_radiusMode_set)
    __swig_setmethods__["rx"] = _deesse.mpds_searchNeighborhoodParameters_rx_set
    __swig_getmethods__["rx"] = _deesse.mpds_searchNeighborhoodParameters_rx_get
    if _newclass:
        rx = _swig_property(_deesse.mpds_searchNeighborhoodParameters_rx_get, _deesse.mpds_searchNeighborhoodParameters_rx_set)
    __swig_setmethods__["ry"] = _deesse.mpds_searchNeighborhoodParameters_ry_set
    __swig_getmethods__["ry"] = _deesse.mpds_searchNeighborhoodParameters_ry_get
    if _newclass:
        ry = _swig_property(_deesse.mpds_searchNeighborhoodParameters_ry_get, _deesse.mpds_searchNeighborhoodParameters_ry_set)
    __swig_setmethods__["rz"] = _deesse.mpds_searchNeighborhoodParameters_rz_set
    __swig_getmethods__["rz"] = _deesse.mpds_searchNeighborhoodParameters_rz_get
    if _newclass:
        rz = _swig_property(_deesse.mpds_searchNeighborhoodParameters_rz_get, _deesse.mpds_searchNeighborhoodParameters_rz_set)
    __swig_setmethods__["anisotropyRatioMode"] = _deesse.mpds_searchNeighborhoodParameters_anisotropyRatioMode_set
    __swig_getmethods__["anisotropyRatioMode"] = _deesse.mpds_searchNeighborhoodParameters_anisotropyRatioMode_get
    if _newclass:
        anisotropyRatioMode = _swig_property(_deesse.mpds_searchNeighborhoodParameters_anisotropyRatioMode_get, _deesse.mpds_searchNeighborhoodParameters_anisotropyRatioMode_set)
    __swig_setmethods__["ax"] = _deesse.mpds_searchNeighborhoodParameters_ax_set
    __swig_getmethods__["ax"] = _deesse.mpds_searchNeighborhoodParameters_ax_get
    if _newclass:
        ax = _swig_property(_deesse.mpds_searchNeighborhoodParameters_ax_get, _deesse.mpds_searchNeighborhoodParameters_ax_set)
    __swig_setmethods__["ay"] = _deesse.mpds_searchNeighborhoodParameters_ay_set
    __swig_getmethods__["ay"] = _deesse.mpds_searchNeighborhoodParameters_ay_get
    if _newclass:
        ay = _swig_property(_deesse.mpds_searchNeighborhoodParameters_ay_get, _deesse.mpds_searchNeighborhoodParameters_ay_set)
    __swig_setmethods__["az"] = _deesse.mpds_searchNeighborhoodParameters_az_set
    __swig_getmethods__["az"] = _deesse.mpds_searchNeighborhoodParameters_az_get
    if _newclass:
        az = _swig_property(_deesse.mpds_searchNeighborhoodParameters_az_get, _deesse.mpds_searchNeighborhoodParameters_az_set)
    __swig_setmethods__["rotationFlag"] = _deesse.mpds_searchNeighborhoodParameters_rotationFlag_set
    __swig_getmethods__["rotationFlag"] = _deesse.mpds_searchNeighborhoodParameters_rotationFlag_get
    if _newclass:
        rotationFlag = _swig_property(_deesse.mpds_searchNeighborhoodParameters_rotationFlag_get, _deesse.mpds_searchNeighborhoodParameters_rotationFlag_set)
    __swig_setmethods__["angle1"] = _deesse.mpds_searchNeighborhoodParameters_angle1_set
    __swig_getmethods__["angle1"] = _deesse.mpds_searchNeighborhoodParameters_angle1_get
    if _newclass:
        angle1 = _swig_property(_deesse.mpds_searchNeighborhoodParameters_angle1_get, _deesse.mpds_searchNeighborhoodParameters_angle1_set)
    __swig_setmethods__["angle2"] = _deesse.mpds_searchNeighborhoodParameters_angle2_set
    __swig_getmethods__["angle2"] = _deesse.mpds_searchNeighborhoodParameters_angle2_get
    if _newclass:
        angle2 = _swig_property(_deesse.mpds_searchNeighborhoodParameters_angle2_get, _deesse.mpds_searchNeighborhoodParameters_angle2_set)
    __swig_setmethods__["angle3"] = _deesse.mpds_searchNeighborhoodParameters_angle3_set
    __swig_getmethods__["angle3"] = _deesse.mpds_searchNeighborhoodParameters_angle3_get
    if _newclass:
        angle3 = _swig_property(_deesse.mpds_searchNeighborhoodParameters_angle3_get, _deesse.mpds_searchNeighborhoodParameters_angle3_set)
    __swig_setmethods__["power"] = _deesse.mpds_searchNeighborhoodParameters_power_set
    __swig_getmethods__["power"] = _deesse.mpds_searchNeighborhoodParameters_power_get
    if _newclass:
        power = _swig_property(_deesse.mpds_searchNeighborhoodParameters_power_get, _deesse.mpds_searchNeighborhoodParameters_power_set)

    def __init__(self):
        this = _deesse.new_mpds_searchNeighborhoodParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_searchNeighborhoodParameters
    __del__ = lambda self: None
mpds_searchNeighborhoodParameters_swigregister = _deesse.mpds_searchNeighborhoodParameters_swigregister
mpds_searchNeighborhoodParameters_swigregister(mpds_searchNeighborhoodParameters)

class mpds_searchNeighborhood(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_searchNeighborhood, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_searchNeighborhood, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _deesse.mpds_searchNeighborhood_size_set
    __swig_getmethods__["size"] = _deesse.mpds_searchNeighborhood_size_get
    if _newclass:
        size = _swig_property(_deesse.mpds_searchNeighborhood_size_get, _deesse.mpds_searchNeighborhood_size_set)
    __swig_setmethods__["ix"] = _deesse.mpds_searchNeighborhood_ix_set
    __swig_getmethods__["ix"] = _deesse.mpds_searchNeighborhood_ix_get
    if _newclass:
        ix = _swig_property(_deesse.mpds_searchNeighborhood_ix_get, _deesse.mpds_searchNeighborhood_ix_set)
    __swig_setmethods__["iy"] = _deesse.mpds_searchNeighborhood_iy_set
    __swig_getmethods__["iy"] = _deesse.mpds_searchNeighborhood_iy_get
    if _newclass:
        iy = _swig_property(_deesse.mpds_searchNeighborhood_iy_get, _deesse.mpds_searchNeighborhood_iy_set)
    __swig_setmethods__["iz"] = _deesse.mpds_searchNeighborhood_iz_set
    __swig_getmethods__["iz"] = _deesse.mpds_searchNeighborhood_iz_get
    if _newclass:
        iz = _swig_property(_deesse.mpds_searchNeighborhood_iz_get, _deesse.mpds_searchNeighborhood_iz_set)
    __swig_setmethods__["distance"] = _deesse.mpds_searchNeighborhood_distance_set
    __swig_getmethods__["distance"] = _deesse.mpds_searchNeighborhood_distance_get
    if _newclass:
        distance = _swig_property(_deesse.mpds_searchNeighborhood_distance_get, _deesse.mpds_searchNeighborhood_distance_set)
    __swig_setmethods__["weight"] = _deesse.mpds_searchNeighborhood_weight_set
    __swig_getmethods__["weight"] = _deesse.mpds_searchNeighborhood_weight_get
    if _newclass:
        weight = _swig_property(_deesse.mpds_searchNeighborhood_weight_get, _deesse.mpds_searchNeighborhood_weight_set)
    __swig_setmethods__["ixMin"] = _deesse.mpds_searchNeighborhood_ixMin_set
    __swig_getmethods__["ixMin"] = _deesse.mpds_searchNeighborhood_ixMin_get
    if _newclass:
        ixMin = _swig_property(_deesse.mpds_searchNeighborhood_ixMin_get, _deesse.mpds_searchNeighborhood_ixMin_set)
    __swig_setmethods__["iyMin"] = _deesse.mpds_searchNeighborhood_iyMin_set
    __swig_getmethods__["iyMin"] = _deesse.mpds_searchNeighborhood_iyMin_get
    if _newclass:
        iyMin = _swig_property(_deesse.mpds_searchNeighborhood_iyMin_get, _deesse.mpds_searchNeighborhood_iyMin_set)
    __swig_setmethods__["izMin"] = _deesse.mpds_searchNeighborhood_izMin_set
    __swig_getmethods__["izMin"] = _deesse.mpds_searchNeighborhood_izMin_get
    if _newclass:
        izMin = _swig_property(_deesse.mpds_searchNeighborhood_izMin_get, _deesse.mpds_searchNeighborhood_izMin_set)
    __swig_setmethods__["ixMax"] = _deesse.mpds_searchNeighborhood_ixMax_set
    __swig_getmethods__["ixMax"] = _deesse.mpds_searchNeighborhood_ixMax_get
    if _newclass:
        ixMax = _swig_property(_deesse.mpds_searchNeighborhood_ixMax_get, _deesse.mpds_searchNeighborhood_ixMax_set)
    __swig_setmethods__["iyMax"] = _deesse.mpds_searchNeighborhood_iyMax_set
    __swig_getmethods__["iyMax"] = _deesse.mpds_searchNeighborhood_iyMax_get
    if _newclass:
        iyMax = _swig_property(_deesse.mpds_searchNeighborhood_iyMax_get, _deesse.mpds_searchNeighborhood_iyMax_set)
    __swig_setmethods__["izMax"] = _deesse.mpds_searchNeighborhood_izMax_set
    __swig_getmethods__["izMax"] = _deesse.mpds_searchNeighborhood_izMax_get
    if _newclass:
        izMax = _swig_property(_deesse.mpds_searchNeighborhood_izMax_get, _deesse.mpds_searchNeighborhood_izMax_set)

    def __init__(self):
        this = _deesse.new_mpds_searchNeighborhood()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_searchNeighborhood
    __del__ = lambda self: None
mpds_searchNeighborhood_swigregister = _deesse.mpds_searchNeighborhood_swigregister
mpds_searchNeighborhood_swigregister(mpds_searchNeighborhood)


def MPDSBuildSearchNeighborhood(arg1, arg2, arg3):
    return _deesse.MPDSBuildSearchNeighborhood(arg1, arg2, arg3)
MPDSBuildSearchNeighborhood = _deesse.MPDSBuildSearchNeighborhood

def MPDSCmpSearchNeighborhoodParameters(arg1, arg2):
    return _deesse.MPDSCmpSearchNeighborhoodParameters(arg1, arg2)
MPDSCmpSearchNeighborhoodParameters = _deesse.MPDSCmpSearchNeighborhoodParameters

def MPDSFreeSearchNeighborhood(arg1):
    return _deesse.MPDSFreeSearchNeighborhood(arg1)
MPDSFreeSearchNeighborhood = _deesse.MPDSFreeSearchNeighborhood

def MPDSInitSearchNeighborhood(arg1):
    return _deesse.MPDSInitSearchNeighborhood(arg1)
MPDSInitSearchNeighborhood = _deesse.MPDSInitSearchNeighborhood

def MPDSInitSearchNeighborhoodParameters(arg1):
    return _deesse.MPDSInitSearchNeighborhoodParameters(arg1)
MPDSInitSearchNeighborhoodParameters = _deesse.MPDSInitSearchNeighborhoodParameters

def MPDSMallocSearchNeighborhood(arg1, arg2):
    return _deesse.MPDSMallocSearchNeighborhood(arg1, arg2)
MPDSMallocSearchNeighborhood = _deesse.MPDSMallocSearchNeighborhood

def MPDSPrintSearchNeighborhood(arg1, arg2, arg3):
    return _deesse.MPDSPrintSearchNeighborhood(arg1, arg2, arg3)
MPDSPrintSearchNeighborhood = _deesse.MPDSPrintSearchNeighborhood

def MPDSPrintSearchNeighborhoodParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintSearchNeighborhoodParameters(arg1, arg2, arg3)
MPDSPrintSearchNeighborhoodParameters = _deesse.MPDSPrintSearchNeighborhoodParameters

def MPDSReadSearchNeighborhoodParameters(arg1, arg2, arg3):
    return _deesse.MPDSReadSearchNeighborhoodParameters(arg1, arg2, arg3)
MPDSReadSearchNeighborhoodParameters = _deesse.MPDSReadSearchNeighborhoodParameters

def MPDSReallocSearchNeighborhood(arg1, arg2):
    return _deesse.MPDSReallocSearchNeighborhood(arg1, arg2)
MPDSReallocSearchNeighborhood = _deesse.MPDSReallocSearchNeighborhood

def MPDSSearchNeighborhoodApproxBound(arg1, arg2, arg3, arg4):
    return _deesse.MPDSSearchNeighborhoodApproxBound(arg1, arg2, arg3, arg4)
MPDSSearchNeighborhoodApproxBound = _deesse.MPDSSearchNeighborhoodApproxBound

def MPDSValidateSearchNeighborhoodParameters(arg1, arg2):
    return _deesse.MPDSValidateSearchNeighborhoodParameters(arg1, arg2)
MPDSValidateSearchNeighborhoodParameters = _deesse.MPDSValidateSearchNeighborhoodParameters

def MPDSSim(arg1, arg2, arg3, arg4):
    return _deesse.MPDSSim(arg1, arg2, arg3, arg4)
MPDSSim = _deesse.MPDSSim

def MPDSSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45):
    return _deesse.MPDSSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45)
MPDSSimComputePyramid = _deesse.MPDSSimComputePyramid

def MPDSSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _deesse.MPDSSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
MPDSSimComputePyramidInitialSim = _deesse.MPDSSimComputePyramidInitialSim

def MPDSSimComputePyramidNvar(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSSimComputePyramidNvar(arg1, arg2, arg3, arg4, arg5)
MPDSSimComputePyramidNvar = _deesse.MPDSSimComputePyramidNvar

def MPDSSimConnectivityAddConditioningData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17):
    return _deesse.MPDSSimConnectivityAddConditioningData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
MPDSSimConnectivityAddConditioningData = _deesse.MPDSSimConnectivityAddConditioningData

def MPDSSimConnectivitySortGroup(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSSimConnectivitySortGroup(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSSimConnectivitySortGroup = _deesse.MPDSSimConnectivitySortGroup

def MPDSSimGetTIMeasures(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSSimGetTIMeasures(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
MPDSSimGetTIMeasures = _deesse.MPDSSimGetTIMeasures

def MPDSSimIntegrateConditioningData(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSSimIntegrateConditioningData(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSSimIntegrateConditioningData = _deesse.MPDSSimIntegrateConditioningData

def MPDSSimIntegrateConditioningDataWithConnectivity(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSSimIntegrateConditioningDataWithConnectivity(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
MPDSSimIntegrateConditioningDataWithConnectivity = _deesse.MPDSSimIntegrateConditioningDataWithConnectivity

def MPDSSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67):
    return _deesse.MPDSSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67)
MPDSSimOneReal = _deesse.MPDSSimOneReal

def MPDSSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67):
    return _deesse.MPDSSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67)
MPDSSimOneRealWithVariableTransform = _deesse.MPDSSimOneRealWithVariableTransform

def MPDSSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19):
    return _deesse.MPDSSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
MPDSSimPrepareBlockData = _deesse.MPDSSimPrepareBlockData

def MPDSSimPrepareBlockDataInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _deesse.MPDSSimPrepareBlockDataInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
MPDSSimPrepareBlockDataInitialSim = _deesse.MPDSSimPrepareBlockDataInitialSim

def MPDSSimPrepareConnectivityRefImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _deesse.MPDSSimPrepareConnectivityRefImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
MPDSSimPrepareConnectivityRefImage = _deesse.MPDSSimPrepareConnectivityRefImage

def MPDSSimPrepareConnectivitySimImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _deesse.MPDSSimPrepareConnectivitySimImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
MPDSSimPrepareConnectivitySimImage = _deesse.MPDSSimPrepareConnectivitySimImage

def MPDSSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _deesse.MPDSSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
MPDSSimPrepareData = _deesse.MPDSSimPrepareData

def MPDSSimPrepareOutput(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _deesse.MPDSSimPrepareOutput(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
MPDSSimPrepareOutput = _deesse.MPDSSimPrepareOutput

def MPDSSimPrepareSearchNeighborhood(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSSimPrepareSearchNeighborhood(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
MPDSSimPrepareSearchNeighborhood = _deesse.MPDSSimPrepareSearchNeighborhood

def MPDSSimPrepareSearchNeighborhoodPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18):
    return _deesse.MPDSSimPrepareSearchNeighborhoodPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18)
MPDSSimPrepareSearchNeighborhoodPyramid = _deesse.MPDSSimPrepareSearchNeighborhoodPyramid

def MPDSSimPrepareSimulationParametersPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41):
    return _deesse.MPDSSimPrepareSimulationParametersPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41)
MPDSSimPrepareSimulationParametersPyramid = _deesse.MPDSSimPrepareSimulationParametersPyramid

def MPDSSimPrepareSimulationPath(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSSimPrepareSimulationPath(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
MPDSSimPrepareSimulationPath = _deesse.MPDSSimPrepareSimulationPath

def MPDSSimPrepareSimulationPathPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23):
    return _deesse.MPDSSimPrepareSimulationPathPyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23)
MPDSSimPrepareSimulationPathPyramid = _deesse.MPDSSimPrepareSimulationPathPyramid

def MPDSSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
MPDSSimPrepareSoftProbability = _deesse.MPDSSimPrepareSoftProbability

def MPDSSimPrepareSoftProbabilityInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSSimPrepareSoftProbabilityInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
MPDSSimPrepareSoftProbabilityInitialSim = _deesse.MPDSSimPrepareSoftProbabilityInitialSim

def MPDSSimPyramid(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSSimPyramid(arg1, arg2, arg3, arg4, arg5)
MPDSSimPyramid = _deesse.MPDSSimPyramid

def MPDSSimStandard(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSSimStandard(arg1, arg2, arg3, arg4, arg5)
MPDSSimStandard = _deesse.MPDSSimStandard

def MPDSSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71):
    return _deesse.MPDSSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71)
MPDSSimPyramidAllLevelOneByOne = _deesse.MPDSSimPyramidAllLevelOneByOne

def MPDSSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71):
    return _deesse.MPDSSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71)
MPDSSimPyramidAllLevelOneByOneWithVariableTransform = _deesse.MPDSSimPyramidAllLevelOneByOneWithVariableTransform

def MPDSSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95):
    return _deesse.MPDSSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95)
MPDSSimPyramidLevelCondToCoarse = _deesse.MPDSSimPyramidLevelCondToCoarse

def MPDSSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95):
    return _deesse.MPDSSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95)
MPDSSimPyramidLevelCondToCoarseWithVariableTransform = _deesse.MPDSSimPyramidLevelCondToCoarseWithVariableTransform

def MPDSSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94):
    return _deesse.MPDSSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94)
MPDSSimPyramidLevelCondToFine = _deesse.MPDSSimPyramidLevelCondToFine

def MPDSSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94):
    return _deesse.MPDSSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94)
MPDSSimPyramidLevelCondToFineWithVariableTransform = _deesse.MPDSSimPyramidLevelCondToFineWithVariableTransform

def MPDSSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61):
    return _deesse.MPDSSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61)
MPDSSimPyramidSingleLevel = _deesse.MPDSSimPyramidSingleLevel

def MPDSSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61):
    return _deesse.MPDSSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61)
MPDSSimPyramidSingleLevelWithVariableTransform = _deesse.MPDSSimPyramidSingleLevelWithVariableTransform

def MPDSSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
MPDSSimTransformHomothetyImage = _deesse.MPDSSimTransformHomothetyImage

def MPDSSimTransformHomothetyValue(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSSimTransformHomothetyValue(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSSimTransformHomothetyValue = _deesse.MPDSSimTransformHomothetyValue

def MPDSSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
MPDSSimTransformRotationImage = _deesse.MPDSSimTransformRotationImage

def MPDSSimTransformRotationValue(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSSimTransformRotationValue(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSSimTransformRotationValue = _deesse.MPDSSimTransformRotationValue
SIM_ONE_BY_ONE = _deesse.SIM_ONE_BY_ONE
SIM_VARIABLE_VECTOR = _deesse.SIM_VARIABLE_VECTOR
PATH_RANDOM = _deesse.PATH_RANDOM
PATH_RANDOM_HD_DISTANCE_PDF = _deesse.PATH_RANDOM_HD_DISTANCE_PDF
PATH_RANDOM_HD_DISTANCE_SORT = _deesse.PATH_RANDOM_HD_DISTANCE_SORT
PATH_RANDOM_HD_DISTANCE_SUM_PDF = _deesse.PATH_RANDOM_HD_DISTANCE_SUM_PDF
PATH_RANDOM_HD_DISTANCE_SUM_SORT = _deesse.PATH_RANDOM_HD_DISTANCE_SUM_SORT
PATH_UNILATERAL = _deesse.PATH_UNILATERAL
class mpds_simAndPathParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_simAndPathParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_simAndPathParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["simType"] = _deesse.mpds_simAndPathParameters_simType_set
    __swig_getmethods__["simType"] = _deesse.mpds_simAndPathParameters_simType_get
    if _newclass:
        simType = _swig_property(_deesse.mpds_simAndPathParameters_simType_get, _deesse.mpds_simAndPathParameters_simType_set)
    __swig_setmethods__["pathType"] = _deesse.mpds_simAndPathParameters_pathType_set
    __swig_getmethods__["pathType"] = _deesse.mpds_simAndPathParameters_pathType_get
    if _newclass:
        pathType = _swig_property(_deesse.mpds_simAndPathParameters_pathType_get, _deesse.mpds_simAndPathParameters_pathType_set)
    __swig_setmethods__["unilateralOrderLength"] = _deesse.mpds_simAndPathParameters_unilateralOrderLength_set
    __swig_getmethods__["unilateralOrderLength"] = _deesse.mpds_simAndPathParameters_unilateralOrderLength_get
    if _newclass:
        unilateralOrderLength = _swig_property(_deesse.mpds_simAndPathParameters_unilateralOrderLength_get, _deesse.mpds_simAndPathParameters_unilateralOrderLength_set)
    __swig_setmethods__["unilateralOrder"] = _deesse.mpds_simAndPathParameters_unilateralOrder_set
    __swig_getmethods__["unilateralOrder"] = _deesse.mpds_simAndPathParameters_unilateralOrder_get
    if _newclass:
        unilateralOrder = _swig_property(_deesse.mpds_simAndPathParameters_unilateralOrder_get, _deesse.mpds_simAndPathParameters_unilateralOrder_set)
    __swig_setmethods__["strength"] = _deesse.mpds_simAndPathParameters_strength_set
    __swig_getmethods__["strength"] = _deesse.mpds_simAndPathParameters_strength_get
    if _newclass:
        strength = _swig_property(_deesse.mpds_simAndPathParameters_strength_get, _deesse.mpds_simAndPathParameters_strength_set)
    __swig_setmethods__["pow"] = _deesse.mpds_simAndPathParameters_pow_set
    __swig_getmethods__["pow"] = _deesse.mpds_simAndPathParameters_pow_get
    if _newclass:
        pow = _swig_property(_deesse.mpds_simAndPathParameters_pow_get, _deesse.mpds_simAndPathParameters_pow_set)

    def __init__(self):
        this = _deesse.new_mpds_simAndPathParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_simAndPathParameters
    __del__ = lambda self: None
mpds_simAndPathParameters_swigregister = _deesse.mpds_simAndPathParameters_swigregister
mpds_simAndPathParameters_swigregister(mpds_simAndPathParameters)


def MPDSCopySimAndPathParameters(arg1, arg2):
    return _deesse.MPDSCopySimAndPathParameters(arg1, arg2)
MPDSCopySimAndPathParameters = _deesse.MPDSCopySimAndPathParameters

def MPDSFreeSimAndPathParameters(arg1):
    return _deesse.MPDSFreeSimAndPathParameters(arg1)
MPDSFreeSimAndPathParameters = _deesse.MPDSFreeSimAndPathParameters

def MPDSInitSimAndPathParameters(arg1):
    return _deesse.MPDSInitSimAndPathParameters(arg1)
MPDSInitSimAndPathParameters = _deesse.MPDSInitSimAndPathParameters

def MPDSPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
MPDSPathDistancePdfRandom = _deesse.MPDSPathDistancePdfRandom

def MPDSPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
MPDSPathDistanceSortRandom = _deesse.MPDSPathDistanceSortRandom

def MPDSPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
MPDSPathDistanceSumPdfRandom = _deesse.MPDSPathDistanceSumPdfRandom

def MPDSPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
MPDSPathDistanceSumSortRandom = _deesse.MPDSPathDistanceSumSortRandom

def MPDSPathRandom(arg1, arg2, arg3):
    return _deesse.MPDSPathRandom(arg1, arg2, arg3)
MPDSPathRandom = _deesse.MPDSPathRandom

def MPDSPathUnilateral3D(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _deesse.MPDSPathUnilateral3D(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
MPDSPathUnilateral3D = _deesse.MPDSPathUnilateral3D

def MPDSPathUnilateral4D(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSPathUnilateral4D(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
MPDSPathUnilateral4D = _deesse.MPDSPathUnilateral4D

def MPDSPrintSimAndPathParameters(arg1, arg2, arg3):
    return _deesse.MPDSPrintSimAndPathParameters(arg1, arg2, arg3)
MPDSPrintSimAndPathParameters = _deesse.MPDSPrintSimAndPathParameters

def MPDSReadSimAndPathParameters(arg1, arg2):
    return _deesse.MPDSReadSimAndPathParameters(arg1, arg2)
MPDSReadSimAndPathParameters = _deesse.MPDSReadSimAndPathParameters

def MPDSValidateSimAndPathParameters(arg1, arg2):
    return _deesse.MPDSValidateSimAndPathParameters(arg1, arg2)
MPDSValidateSimAndPathParameters = _deesse.MPDSValidateSimAndPathParameters

def MPDSVectorPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSVectorPathDistancePdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
MPDSVectorPathDistancePdfRandom = _deesse.MPDSVectorPathDistancePdfRandom

def MPDSVectorPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12):
    return _deesse.MPDSVectorPathDistanceSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
MPDSVectorPathDistanceSortRandom = _deesse.MPDSVectorPathDistanceSortRandom

def MPDSVectorPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSVectorPathDistanceSumPdfRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
MPDSVectorPathDistanceSumPdfRandom = _deesse.MPDSVectorPathDistanceSumPdfRandom

def MPDSVectorPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13):
    return _deesse.MPDSVectorPathDistanceSumSortRandom(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
MPDSVectorPathDistanceSumSortRandom = _deesse.MPDSVectorPathDistanceSumSortRandom
OUTPUT_SIM_NO_FILE = _deesse.OUTPUT_SIM_NO_FILE
OUTPUT_SIM_ALL_IN_ONE_FILE = _deesse.OUTPUT_SIM_ALL_IN_ONE_FILE
OUTPUT_SIM_ONE_FILE_PER_VARIABLE = _deesse.OUTPUT_SIM_ONE_FILE_PER_VARIABLE
OUTPUT_SIM_ONE_FILE_PER_REALIZATION = _deesse.OUTPUT_SIM_ONE_FILE_PER_REALIZATION
NORMALIZING_LINEAR = _deesse.NORMALIZING_LINEAR
NORMALIZING_UNIFORM = _deesse.NORMALIZING_UNIFORM
NORMALIZING_NORMAL = _deesse.NORMALIZING_NORMAL
RESCALING_NONE = _deesse.RESCALING_NONE
RESCALING_MIN_MAX = _deesse.RESCALING_MIN_MAX
RESCALING_MEAN_LENGTH = _deesse.RESCALING_MEAN_LENGTH
class mpds_simInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_simInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_simInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["consoleAppFlag"] = _deesse.mpds_simInput_consoleAppFlag_set
    __swig_getmethods__["consoleAppFlag"] = _deesse.mpds_simInput_consoleAppFlag_get
    if _newclass:
        consoleAppFlag = _swig_property(_deesse.mpds_simInput_consoleAppFlag_get, _deesse.mpds_simInput_consoleAppFlag_set)
    __swig_setmethods__["simImage"] = _deesse.mpds_simInput_simImage_set
    __swig_getmethods__["simImage"] = _deesse.mpds_simInput_simImage_get
    if _newclass:
        simImage = _swig_property(_deesse.mpds_simInput_simImage_get, _deesse.mpds_simInput_simImage_set)
    __swig_setmethods__["nvar"] = _deesse.mpds_simInput_nvar_set
    __swig_getmethods__["nvar"] = _deesse.mpds_simInput_nvar_get
    if _newclass:
        nvar = _swig_property(_deesse.mpds_simInput_nvar_get, _deesse.mpds_simInput_nvar_set)
    __swig_setmethods__["outputVarFlag"] = _deesse.mpds_simInput_outputVarFlag_set
    __swig_getmethods__["outputVarFlag"] = _deesse.mpds_simInput_outputVarFlag_get
    if _newclass:
        outputVarFlag = _swig_property(_deesse.mpds_simInput_outputVarFlag_get, _deesse.mpds_simInput_outputVarFlag_set)
    __swig_setmethods__["formatStringVar"] = _deesse.mpds_simInput_formatStringVar_set
    __swig_getmethods__["formatStringVar"] = _deesse.mpds_simInput_formatStringVar_get
    if _newclass:
        formatStringVar = _swig_property(_deesse.mpds_simInput_formatStringVar_get, _deesse.mpds_simInput_formatStringVar_set)
    __swig_setmethods__["outputSimJob"] = _deesse.mpds_simInput_outputSimJob_set
    __swig_getmethods__["outputSimJob"] = _deesse.mpds_simInput_outputSimJob_get
    if _newclass:
        outputSimJob = _swig_property(_deesse.mpds_simInput_outputSimJob_get, _deesse.mpds_simInput_outputSimJob_set)
    __swig_setmethods__["outputSimImageFileName"] = _deesse.mpds_simInput_outputSimImageFileName_set
    __swig_getmethods__["outputSimImageFileName"] = _deesse.mpds_simInput_outputSimImageFileName_get
    if _newclass:
        outputSimImageFileName = _swig_property(_deesse.mpds_simInput_outputSimImageFileName_get, _deesse.mpds_simInput_outputSimImageFileName_set)
    __swig_setmethods__["outputPathIndexFlag"] = _deesse.mpds_simInput_outputPathIndexFlag_set
    __swig_getmethods__["outputPathIndexFlag"] = _deesse.mpds_simInput_outputPathIndexFlag_get
    if _newclass:
        outputPathIndexFlag = _swig_property(_deesse.mpds_simInput_outputPathIndexFlag_get, _deesse.mpds_simInput_outputPathIndexFlag_set)
    __swig_setmethods__["outputPathIndexFileName"] = _deesse.mpds_simInput_outputPathIndexFileName_set
    __swig_getmethods__["outputPathIndexFileName"] = _deesse.mpds_simInput_outputPathIndexFileName_get
    if _newclass:
        outputPathIndexFileName = _swig_property(_deesse.mpds_simInput_outputPathIndexFileName_get, _deesse.mpds_simInput_outputPathIndexFileName_set)
    __swig_setmethods__["outputErrorFlag"] = _deesse.mpds_simInput_outputErrorFlag_set
    __swig_getmethods__["outputErrorFlag"] = _deesse.mpds_simInput_outputErrorFlag_get
    if _newclass:
        outputErrorFlag = _swig_property(_deesse.mpds_simInput_outputErrorFlag_get, _deesse.mpds_simInput_outputErrorFlag_set)
    __swig_setmethods__["outputErrorFileName"] = _deesse.mpds_simInput_outputErrorFileName_set
    __swig_getmethods__["outputErrorFileName"] = _deesse.mpds_simInput_outputErrorFileName_get
    if _newclass:
        outputErrorFileName = _swig_property(_deesse.mpds_simInput_outputErrorFileName_get, _deesse.mpds_simInput_outputErrorFileName_set)
    __swig_setmethods__["outputReportFlag"] = _deesse.mpds_simInput_outputReportFlag_set
    __swig_getmethods__["outputReportFlag"] = _deesse.mpds_simInput_outputReportFlag_get
    if _newclass:
        outputReportFlag = _swig_property(_deesse.mpds_simInput_outputReportFlag_get, _deesse.mpds_simInput_outputReportFlag_set)
    __swig_setmethods__["outputReportFileName"] = _deesse.mpds_simInput_outputReportFileName_set
    __swig_getmethods__["outputReportFileName"] = _deesse.mpds_simInput_outputReportFileName_get
    if _newclass:
        outputReportFileName = _swig_property(_deesse.mpds_simInput_outputReportFileName_get, _deesse.mpds_simInput_outputReportFileName_set)
    __swig_setmethods__["ntrainImage"] = _deesse.mpds_simInput_ntrainImage_set
    __swig_getmethods__["ntrainImage"] = _deesse.mpds_simInput_ntrainImage_get
    if _newclass:
        ntrainImage = _swig_property(_deesse.mpds_simInput_ntrainImage_get, _deesse.mpds_simInput_ntrainImage_set)
    __swig_setmethods__["simGridAsTiFlag"] = _deesse.mpds_simInput_simGridAsTiFlag_set
    __swig_getmethods__["simGridAsTiFlag"] = _deesse.mpds_simInput_simGridAsTiFlag_get
    if _newclass:
        simGridAsTiFlag = _swig_property(_deesse.mpds_simInput_simGridAsTiFlag_get, _deesse.mpds_simInput_simGridAsTiFlag_set)
    __swig_setmethods__["trainImage"] = _deesse.mpds_simInput_trainImage_set
    __swig_getmethods__["trainImage"] = _deesse.mpds_simInput_trainImage_get
    if _newclass:
        trainImage = _swig_property(_deesse.mpds_simInput_trainImage_get, _deesse.mpds_simInput_trainImage_set)
    __swig_setmethods__["pdfTrainImage"] = _deesse.mpds_simInput_pdfTrainImage_set
    __swig_getmethods__["pdfTrainImage"] = _deesse.mpds_simInput_pdfTrainImage_get
    if _newclass:
        pdfTrainImage = _swig_property(_deesse.mpds_simInput_pdfTrainImage_get, _deesse.mpds_simInput_pdfTrainImage_set)
    __swig_setmethods__["ndataImage"] = _deesse.mpds_simInput_ndataImage_set
    __swig_getmethods__["ndataImage"] = _deesse.mpds_simInput_ndataImage_get
    if _newclass:
        ndataImage = _swig_property(_deesse.mpds_simInput_ndataImage_get, _deesse.mpds_simInput_ndataImage_set)
    __swig_setmethods__["dataImage"] = _deesse.mpds_simInput_dataImage_set
    __swig_getmethods__["dataImage"] = _deesse.mpds_simInput_dataImage_get
    if _newclass:
        dataImage = _swig_property(_deesse.mpds_simInput_dataImage_get, _deesse.mpds_simInput_dataImage_set)
    __swig_setmethods__["ndataPointSet"] = _deesse.mpds_simInput_ndataPointSet_set
    __swig_getmethods__["ndataPointSet"] = _deesse.mpds_simInput_ndataPointSet_get
    if _newclass:
        ndataPointSet = _swig_property(_deesse.mpds_simInput_ndataPointSet_get, _deesse.mpds_simInput_ndataPointSet_set)
    __swig_setmethods__["dataPointSet"] = _deesse.mpds_simInput_dataPointSet_set
    __swig_getmethods__["dataPointSet"] = _deesse.mpds_simInput_dataPointSet_get
    if _newclass:
        dataPointSet = _swig_property(_deesse.mpds_simInput_dataPointSet_get, _deesse.mpds_simInput_dataPointSet_set)
    __swig_setmethods__["maskImageFlag"] = _deesse.mpds_simInput_maskImageFlag_set
    __swig_getmethods__["maskImageFlag"] = _deesse.mpds_simInput_maskImageFlag_get
    if _newclass:
        maskImageFlag = _swig_property(_deesse.mpds_simInput_maskImageFlag_get, _deesse.mpds_simInput_maskImageFlag_set)
    __swig_setmethods__["maskImage"] = _deesse.mpds_simInput_maskImage_set
    __swig_getmethods__["maskImage"] = _deesse.mpds_simInput_maskImage_get
    if _newclass:
        maskImage = _swig_property(_deesse.mpds_simInput_maskImage_get, _deesse.mpds_simInput_maskImage_set)
    __swig_setmethods__["homothetyUsage"] = _deesse.mpds_simInput_homothetyUsage_set
    __swig_getmethods__["homothetyUsage"] = _deesse.mpds_simInput_homothetyUsage_get
    if _newclass:
        homothetyUsage = _swig_property(_deesse.mpds_simInput_homothetyUsage_get, _deesse.mpds_simInput_homothetyUsage_set)
    __swig_setmethods__["homothetyXRatioImageFlag"] = _deesse.mpds_simInput_homothetyXRatioImageFlag_set
    __swig_getmethods__["homothetyXRatioImageFlag"] = _deesse.mpds_simInput_homothetyXRatioImageFlag_get
    if _newclass:
        homothetyXRatioImageFlag = _swig_property(_deesse.mpds_simInput_homothetyXRatioImageFlag_get, _deesse.mpds_simInput_homothetyXRatioImageFlag_set)
    __swig_setmethods__["homothetyYRatioImageFlag"] = _deesse.mpds_simInput_homothetyYRatioImageFlag_set
    __swig_getmethods__["homothetyYRatioImageFlag"] = _deesse.mpds_simInput_homothetyYRatioImageFlag_get
    if _newclass:
        homothetyYRatioImageFlag = _swig_property(_deesse.mpds_simInput_homothetyYRatioImageFlag_get, _deesse.mpds_simInput_homothetyYRatioImageFlag_set)
    __swig_setmethods__["homothetyZRatioImageFlag"] = _deesse.mpds_simInput_homothetyZRatioImageFlag_set
    __swig_getmethods__["homothetyZRatioImageFlag"] = _deesse.mpds_simInput_homothetyZRatioImageFlag_get
    if _newclass:
        homothetyZRatioImageFlag = _swig_property(_deesse.mpds_simInput_homothetyZRatioImageFlag_get, _deesse.mpds_simInput_homothetyZRatioImageFlag_set)
    __swig_setmethods__["homothetyXRatioValue"] = _deesse.mpds_simInput_homothetyXRatioValue_set
    __swig_getmethods__["homothetyXRatioValue"] = _deesse.mpds_simInput_homothetyXRatioValue_get
    if _newclass:
        homothetyXRatioValue = _swig_property(_deesse.mpds_simInput_homothetyXRatioValue_get, _deesse.mpds_simInput_homothetyXRatioValue_set)
    __swig_setmethods__["homothetyYRatioValue"] = _deesse.mpds_simInput_homothetyYRatioValue_set
    __swig_getmethods__["homothetyYRatioValue"] = _deesse.mpds_simInput_homothetyYRatioValue_get
    if _newclass:
        homothetyYRatioValue = _swig_property(_deesse.mpds_simInput_homothetyYRatioValue_get, _deesse.mpds_simInput_homothetyYRatioValue_set)
    __swig_setmethods__["homothetyZRatioValue"] = _deesse.mpds_simInput_homothetyZRatioValue_set
    __swig_getmethods__["homothetyZRatioValue"] = _deesse.mpds_simInput_homothetyZRatioValue_get
    if _newclass:
        homothetyZRatioValue = _swig_property(_deesse.mpds_simInput_homothetyZRatioValue_get, _deesse.mpds_simInput_homothetyZRatioValue_set)
    __swig_setmethods__["homothetyXRatioImage"] = _deesse.mpds_simInput_homothetyXRatioImage_set
    __swig_getmethods__["homothetyXRatioImage"] = _deesse.mpds_simInput_homothetyXRatioImage_get
    if _newclass:
        homothetyXRatioImage = _swig_property(_deesse.mpds_simInput_homothetyXRatioImage_get, _deesse.mpds_simInput_homothetyXRatioImage_set)
    __swig_setmethods__["homothetyYRatioImage"] = _deesse.mpds_simInput_homothetyYRatioImage_set
    __swig_getmethods__["homothetyYRatioImage"] = _deesse.mpds_simInput_homothetyYRatioImage_get
    if _newclass:
        homothetyYRatioImage = _swig_property(_deesse.mpds_simInput_homothetyYRatioImage_get, _deesse.mpds_simInput_homothetyYRatioImage_set)
    __swig_setmethods__["homothetyZRatioImage"] = _deesse.mpds_simInput_homothetyZRatioImage_set
    __swig_getmethods__["homothetyZRatioImage"] = _deesse.mpds_simInput_homothetyZRatioImage_get
    if _newclass:
        homothetyZRatioImage = _swig_property(_deesse.mpds_simInput_homothetyZRatioImage_get, _deesse.mpds_simInput_homothetyZRatioImage_set)
    __swig_setmethods__["rotationUsage"] = _deesse.mpds_simInput_rotationUsage_set
    __swig_getmethods__["rotationUsage"] = _deesse.mpds_simInput_rotationUsage_get
    if _newclass:
        rotationUsage = _swig_property(_deesse.mpds_simInput_rotationUsage_get, _deesse.mpds_simInput_rotationUsage_set)
    __swig_setmethods__["rotationAzimuthImageFlag"] = _deesse.mpds_simInput_rotationAzimuthImageFlag_set
    __swig_getmethods__["rotationAzimuthImageFlag"] = _deesse.mpds_simInput_rotationAzimuthImageFlag_get
    if _newclass:
        rotationAzimuthImageFlag = _swig_property(_deesse.mpds_simInput_rotationAzimuthImageFlag_get, _deesse.mpds_simInput_rotationAzimuthImageFlag_set)
    __swig_setmethods__["rotationDipImageFlag"] = _deesse.mpds_simInput_rotationDipImageFlag_set
    __swig_getmethods__["rotationDipImageFlag"] = _deesse.mpds_simInput_rotationDipImageFlag_get
    if _newclass:
        rotationDipImageFlag = _swig_property(_deesse.mpds_simInput_rotationDipImageFlag_get, _deesse.mpds_simInput_rotationDipImageFlag_set)
    __swig_setmethods__["rotationPlungeImageFlag"] = _deesse.mpds_simInput_rotationPlungeImageFlag_set
    __swig_getmethods__["rotationPlungeImageFlag"] = _deesse.mpds_simInput_rotationPlungeImageFlag_get
    if _newclass:
        rotationPlungeImageFlag = _swig_property(_deesse.mpds_simInput_rotationPlungeImageFlag_get, _deesse.mpds_simInput_rotationPlungeImageFlag_set)
    __swig_setmethods__["rotationAzimuthValue"] = _deesse.mpds_simInput_rotationAzimuthValue_set
    __swig_getmethods__["rotationAzimuthValue"] = _deesse.mpds_simInput_rotationAzimuthValue_get
    if _newclass:
        rotationAzimuthValue = _swig_property(_deesse.mpds_simInput_rotationAzimuthValue_get, _deesse.mpds_simInput_rotationAzimuthValue_set)
    __swig_setmethods__["rotationDipValue"] = _deesse.mpds_simInput_rotationDipValue_set
    __swig_getmethods__["rotationDipValue"] = _deesse.mpds_simInput_rotationDipValue_get
    if _newclass:
        rotationDipValue = _swig_property(_deesse.mpds_simInput_rotationDipValue_get, _deesse.mpds_simInput_rotationDipValue_set)
    __swig_setmethods__["rotationPlungeValue"] = _deesse.mpds_simInput_rotationPlungeValue_set
    __swig_getmethods__["rotationPlungeValue"] = _deesse.mpds_simInput_rotationPlungeValue_get
    if _newclass:
        rotationPlungeValue = _swig_property(_deesse.mpds_simInput_rotationPlungeValue_get, _deesse.mpds_simInput_rotationPlungeValue_set)
    __swig_setmethods__["rotationAzimuthImage"] = _deesse.mpds_simInput_rotationAzimuthImage_set
    __swig_getmethods__["rotationAzimuthImage"] = _deesse.mpds_simInput_rotationAzimuthImage_get
    if _newclass:
        rotationAzimuthImage = _swig_property(_deesse.mpds_simInput_rotationAzimuthImage_get, _deesse.mpds_simInput_rotationAzimuthImage_set)
    __swig_setmethods__["rotationDipImage"] = _deesse.mpds_simInput_rotationDipImage_set
    __swig_getmethods__["rotationDipImage"] = _deesse.mpds_simInput_rotationDipImage_get
    if _newclass:
        rotationDipImage = _swig_property(_deesse.mpds_simInput_rotationDipImage_get, _deesse.mpds_simInput_rotationDipImage_set)
    __swig_setmethods__["rotationPlungeImage"] = _deesse.mpds_simInput_rotationPlungeImage_set
    __swig_getmethods__["rotationPlungeImage"] = _deesse.mpds_simInput_rotationPlungeImage_get
    if _newclass:
        rotationPlungeImage = _swig_property(_deesse.mpds_simInput_rotationPlungeImage_get, _deesse.mpds_simInput_rotationPlungeImage_set)
    __swig_setmethods__["trainValueRangeExtensionMax"] = _deesse.mpds_simInput_trainValueRangeExtensionMax_set
    __swig_getmethods__["trainValueRangeExtensionMax"] = _deesse.mpds_simInput_trainValueRangeExtensionMax_get
    if _newclass:
        trainValueRangeExtensionMax = _swig_property(_deesse.mpds_simInput_trainValueRangeExtensionMax_get, _deesse.mpds_simInput_trainValueRangeExtensionMax_set)
    __swig_setmethods__["normalizingType"] = _deesse.mpds_simInput_normalizingType_set
    __swig_getmethods__["normalizingType"] = _deesse.mpds_simInput_normalizingType_get
    if _newclass:
        normalizingType = _swig_property(_deesse.mpds_simInput_normalizingType_get, _deesse.mpds_simInput_normalizingType_set)
    __swig_setmethods__["searchNeighborhoodParameters"] = _deesse.mpds_simInput_searchNeighborhoodParameters_set
    __swig_getmethods__["searchNeighborhoodParameters"] = _deesse.mpds_simInput_searchNeighborhoodParameters_get
    if _newclass:
        searchNeighborhoodParameters = _swig_property(_deesse.mpds_simInput_searchNeighborhoodParameters_get, _deesse.mpds_simInput_searchNeighborhoodParameters_set)
    __swig_setmethods__["nneighboringNode"] = _deesse.mpds_simInput_nneighboringNode_set
    __swig_getmethods__["nneighboringNode"] = _deesse.mpds_simInput_nneighboringNode_get
    if _newclass:
        nneighboringNode = _swig_property(_deesse.mpds_simInput_nneighboringNode_get, _deesse.mpds_simInput_nneighboringNode_set)
    __swig_setmethods__["neighboringNodeDensity"] = _deesse.mpds_simInput_neighboringNodeDensity_set
    __swig_getmethods__["neighboringNodeDensity"] = _deesse.mpds_simInput_neighboringNodeDensity_get
    if _newclass:
        neighboringNodeDensity = _swig_property(_deesse.mpds_simInput_neighboringNodeDensity_get, _deesse.mpds_simInput_neighboringNodeDensity_set)
    __swig_setmethods__["rescalingMode"] = _deesse.mpds_simInput_rescalingMode_set
    __swig_getmethods__["rescalingMode"] = _deesse.mpds_simInput_rescalingMode_get
    if _newclass:
        rescalingMode = _swig_property(_deesse.mpds_simInput_rescalingMode_get, _deesse.mpds_simInput_rescalingMode_set)
    __swig_setmethods__["rescalingTargetMin"] = _deesse.mpds_simInput_rescalingTargetMin_set
    __swig_getmethods__["rescalingTargetMin"] = _deesse.mpds_simInput_rescalingTargetMin_get
    if _newclass:
        rescalingTargetMin = _swig_property(_deesse.mpds_simInput_rescalingTargetMin_get, _deesse.mpds_simInput_rescalingTargetMin_set)
    __swig_setmethods__["rescalingTargetMax"] = _deesse.mpds_simInput_rescalingTargetMax_set
    __swig_getmethods__["rescalingTargetMax"] = _deesse.mpds_simInput_rescalingTargetMax_get
    if _newclass:
        rescalingTargetMax = _swig_property(_deesse.mpds_simInput_rescalingTargetMax_get, _deesse.mpds_simInput_rescalingTargetMax_set)
    __swig_setmethods__["rescalingTargetMean"] = _deesse.mpds_simInput_rescalingTargetMean_set
    __swig_getmethods__["rescalingTargetMean"] = _deesse.mpds_simInput_rescalingTargetMean_get
    if _newclass:
        rescalingTargetMean = _swig_property(_deesse.mpds_simInput_rescalingTargetMean_get, _deesse.mpds_simInput_rescalingTargetMean_set)
    __swig_setmethods__["rescalingTargetLength"] = _deesse.mpds_simInput_rescalingTargetLength_set
    __swig_getmethods__["rescalingTargetLength"] = _deesse.mpds_simInput_rescalingTargetLength_get
    if _newclass:
        rescalingTargetLength = _swig_property(_deesse.mpds_simInput_rescalingTargetLength_get, _deesse.mpds_simInput_rescalingTargetLength_set)
    __swig_setmethods__["relativeDistanceFlag"] = _deesse.mpds_simInput_relativeDistanceFlag_set
    __swig_getmethods__["relativeDistanceFlag"] = _deesse.mpds_simInput_relativeDistanceFlag_get
    if _newclass:
        relativeDistanceFlag = _swig_property(_deesse.mpds_simInput_relativeDistanceFlag_get, _deesse.mpds_simInput_relativeDistanceFlag_set)
    __swig_setmethods__["distanceType"] = _deesse.mpds_simInput_distanceType_set
    __swig_getmethods__["distanceType"] = _deesse.mpds_simInput_distanceType_get
    if _newclass:
        distanceType = _swig_property(_deesse.mpds_simInput_distanceType_get, _deesse.mpds_simInput_distanceType_set)
    __swig_setmethods__["powerLpDistance"] = _deesse.mpds_simInput_powerLpDistance_set
    __swig_getmethods__["powerLpDistance"] = _deesse.mpds_simInput_powerLpDistance_get
    if _newclass:
        powerLpDistance = _swig_property(_deesse.mpds_simInput_powerLpDistance_get, _deesse.mpds_simInput_powerLpDistance_set)
    __swig_setmethods__["powerLpDistanceInv"] = _deesse.mpds_simInput_powerLpDistanceInv_set
    __swig_getmethods__["powerLpDistanceInv"] = _deesse.mpds_simInput_powerLpDistanceInv_get
    if _newclass:
        powerLpDistanceInv = _swig_property(_deesse.mpds_simInput_powerLpDistanceInv_get, _deesse.mpds_simInput_powerLpDistanceInv_set)
    __swig_setmethods__["conditioningWeightFactor"] = _deesse.mpds_simInput_conditioningWeightFactor_set
    __swig_getmethods__["conditioningWeightFactor"] = _deesse.mpds_simInput_conditioningWeightFactor_get
    if _newclass:
        conditioningWeightFactor = _swig_property(_deesse.mpds_simInput_conditioningWeightFactor_get, _deesse.mpds_simInput_conditioningWeightFactor_set)
    __swig_setmethods__["simAndPathParameters"] = _deesse.mpds_simInput_simAndPathParameters_set
    __swig_getmethods__["simAndPathParameters"] = _deesse.mpds_simInput_simAndPathParameters_get
    if _newclass:
        simAndPathParameters = _swig_property(_deesse.mpds_simInput_simAndPathParameters_get, _deesse.mpds_simInput_simAndPathParameters_set)
    __swig_setmethods__["distanceThreshold"] = _deesse.mpds_simInput_distanceThreshold_set
    __swig_getmethods__["distanceThreshold"] = _deesse.mpds_simInput_distanceThreshold_get
    if _newclass:
        distanceThreshold = _swig_property(_deesse.mpds_simInput_distanceThreshold_get, _deesse.mpds_simInput_distanceThreshold_set)
    __swig_setmethods__["softProbability"] = _deesse.mpds_simInput_softProbability_set
    __swig_getmethods__["softProbability"] = _deesse.mpds_simInput_softProbability_get
    if _newclass:
        softProbability = _swig_property(_deesse.mpds_simInput_softProbability_get, _deesse.mpds_simInput_softProbability_set)
    __swig_setmethods__["connectivity"] = _deesse.mpds_simInput_connectivity_set
    __swig_getmethods__["connectivity"] = _deesse.mpds_simInput_connectivity_get
    if _newclass:
        connectivity = _swig_property(_deesse.mpds_simInput_connectivity_get, _deesse.mpds_simInput_connectivity_set)
    __swig_setmethods__["blockData"] = _deesse.mpds_simInput_blockData_set
    __swig_getmethods__["blockData"] = _deesse.mpds_simInput_blockData_get
    if _newclass:
        blockData = _swig_property(_deesse.mpds_simInput_blockData_get, _deesse.mpds_simInput_blockData_set)
    __swig_setmethods__["maxScanFraction"] = _deesse.mpds_simInput_maxScanFraction_set
    __swig_getmethods__["maxScanFraction"] = _deesse.mpds_simInput_maxScanFraction_get
    if _newclass:
        maxScanFraction = _swig_property(_deesse.mpds_simInput_maxScanFraction_get, _deesse.mpds_simInput_maxScanFraction_set)
    __swig_setmethods__["pyramidGeneralParameters"] = _deesse.mpds_simInput_pyramidGeneralParameters_set
    __swig_getmethods__["pyramidGeneralParameters"] = _deesse.mpds_simInput_pyramidGeneralParameters_get
    if _newclass:
        pyramidGeneralParameters = _swig_property(_deesse.mpds_simInput_pyramidGeneralParameters_get, _deesse.mpds_simInput_pyramidGeneralParameters_set)
    __swig_setmethods__["pyramidParameters"] = _deesse.mpds_simInput_pyramidParameters_set
    __swig_getmethods__["pyramidParameters"] = _deesse.mpds_simInput_pyramidParameters_get
    if _newclass:
        pyramidParameters = _swig_property(_deesse.mpds_simInput_pyramidParameters_get, _deesse.mpds_simInput_pyramidParameters_set)
    __swig_setmethods__["tolerance"] = _deesse.mpds_simInput_tolerance_set
    __swig_getmethods__["tolerance"] = _deesse.mpds_simInput_tolerance_get
    if _newclass:
        tolerance = _swig_property(_deesse.mpds_simInput_tolerance_get, _deesse.mpds_simInput_tolerance_set)
    __swig_setmethods__["npostProcessingPathMax"] = _deesse.mpds_simInput_npostProcessingPathMax_set
    __swig_getmethods__["npostProcessingPathMax"] = _deesse.mpds_simInput_npostProcessingPathMax_get
    if _newclass:
        npostProcessingPathMax = _swig_property(_deesse.mpds_simInput_npostProcessingPathMax_get, _deesse.mpds_simInput_npostProcessingPathMax_set)
    __swig_setmethods__["postProcessingNneighboringNode"] = _deesse.mpds_simInput_postProcessingNneighboringNode_set
    __swig_getmethods__["postProcessingNneighboringNode"] = _deesse.mpds_simInput_postProcessingNneighboringNode_get
    if _newclass:
        postProcessingNneighboringNode = _swig_property(_deesse.mpds_simInput_postProcessingNneighboringNode_get, _deesse.mpds_simInput_postProcessingNneighboringNode_set)
    __swig_setmethods__["postProcessingNeighboringNodeDensity"] = _deesse.mpds_simInput_postProcessingNeighboringNodeDensity_set
    __swig_getmethods__["postProcessingNeighboringNodeDensity"] = _deesse.mpds_simInput_postProcessingNeighboringNodeDensity_get
    if _newclass:
        postProcessingNeighboringNodeDensity = _swig_property(_deesse.mpds_simInput_postProcessingNeighboringNodeDensity_get, _deesse.mpds_simInput_postProcessingNeighboringNodeDensity_set)
    __swig_setmethods__["postProcessingDistanceThreshold"] = _deesse.mpds_simInput_postProcessingDistanceThreshold_set
    __swig_getmethods__["postProcessingDistanceThreshold"] = _deesse.mpds_simInput_postProcessingDistanceThreshold_get
    if _newclass:
        postProcessingDistanceThreshold = _swig_property(_deesse.mpds_simInput_postProcessingDistanceThreshold_get, _deesse.mpds_simInput_postProcessingDistanceThreshold_set)
    __swig_setmethods__["postProcessingMaxScanFraction"] = _deesse.mpds_simInput_postProcessingMaxScanFraction_set
    __swig_getmethods__["postProcessingMaxScanFraction"] = _deesse.mpds_simInput_postProcessingMaxScanFraction_get
    if _newclass:
        postProcessingMaxScanFraction = _swig_property(_deesse.mpds_simInput_postProcessingMaxScanFraction_get, _deesse.mpds_simInput_postProcessingMaxScanFraction_set)
    __swig_setmethods__["postProcessingTolerance"] = _deesse.mpds_simInput_postProcessingTolerance_set
    __swig_getmethods__["postProcessingTolerance"] = _deesse.mpds_simInput_postProcessingTolerance_get
    if _newclass:
        postProcessingTolerance = _swig_property(_deesse.mpds_simInput_postProcessingTolerance_get, _deesse.mpds_simInput_postProcessingTolerance_set)
    __swig_setmethods__["seed"] = _deesse.mpds_simInput_seed_set
    __swig_getmethods__["seed"] = _deesse.mpds_simInput_seed_get
    if _newclass:
        seed = _swig_property(_deesse.mpds_simInput_seed_get, _deesse.mpds_simInput_seed_set)
    __swig_setmethods__["seedIncrement"] = _deesse.mpds_simInput_seedIncrement_set
    __swig_getmethods__["seedIncrement"] = _deesse.mpds_simInput_seedIncrement_get
    if _newclass:
        seedIncrement = _swig_property(_deesse.mpds_simInput_seedIncrement_get, _deesse.mpds_simInput_seedIncrement_set)
    __swig_setmethods__["nrealization"] = _deesse.mpds_simInput_nrealization_set
    __swig_getmethods__["nrealization"] = _deesse.mpds_simInput_nrealization_get
    if _newclass:
        nrealization = _swig_property(_deesse.mpds_simInput_nrealization_get, _deesse.mpds_simInput_nrealization_set)

    def __init__(self):
        this = _deesse.new_mpds_simInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_simInput
    __del__ = lambda self: None
mpds_simInput_swigregister = _deesse.mpds_simInput_swigregister
mpds_simInput_swigregister(mpds_simInput)


def MPDSFreeSimInput(arg1):
    return _deesse.MPDSFreeSimInput(arg1)
MPDSFreeSimInput = _deesse.MPDSFreeSimInput

def MPDSInitSimInput(arg1):
    return _deesse.MPDSInitSimInput(arg1)
MPDSInitSimInput = _deesse.MPDSInitSimInput

def MPDSPrintSimInput(arg1, arg2, arg3):
    return _deesse.MPDSPrintSimInput(arg1, arg2, arg3)
MPDSPrintSimInput = _deesse.MPDSPrintSimInput

def MPDSPrintVersion(arg1, arg2, arg3):
    return _deesse.MPDSPrintVersion(arg1, arg2, arg3)
MPDSPrintVersion = _deesse.MPDSPrintVersion

def MPDSValidateSimInput(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidateSimInput(arg1, arg2, arg3, arg4)
MPDSValidateSimInput = _deesse.MPDSValidateSimInput
class mpds_simOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_simOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_simOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nreal"] = _deesse.mpds_simOutput_nreal_set
    __swig_getmethods__["nreal"] = _deesse.mpds_simOutput_nreal_get
    if _newclass:
        nreal = _swig_property(_deesse.mpds_simOutput_nreal_get, _deesse.mpds_simOutput_nreal_set)
    __swig_setmethods__["nvarSimPerReal"] = _deesse.mpds_simOutput_nvarSimPerReal_set
    __swig_getmethods__["nvarSimPerReal"] = _deesse.mpds_simOutput_nvarSimPerReal_get
    if _newclass:
        nvarSimPerReal = _swig_property(_deesse.mpds_simOutput_nvarSimPerReal_get, _deesse.mpds_simOutput_nvarSimPerReal_set)
    __swig_setmethods__["outputSimImage"] = _deesse.mpds_simOutput_outputSimImage_set
    __swig_getmethods__["outputSimImage"] = _deesse.mpds_simOutput_outputSimImage_get
    if _newclass:
        outputSimImage = _swig_property(_deesse.mpds_simOutput_outputSimImage_get, _deesse.mpds_simOutput_outputSimImage_set)
    __swig_setmethods__["nvarPathIndexPerReal"] = _deesse.mpds_simOutput_nvarPathIndexPerReal_set
    __swig_getmethods__["nvarPathIndexPerReal"] = _deesse.mpds_simOutput_nvarPathIndexPerReal_get
    if _newclass:
        nvarPathIndexPerReal = _swig_property(_deesse.mpds_simOutput_nvarPathIndexPerReal_get, _deesse.mpds_simOutput_nvarPathIndexPerReal_set)
    __swig_setmethods__["outputPathIndexImage"] = _deesse.mpds_simOutput_outputPathIndexImage_set
    __swig_getmethods__["outputPathIndexImage"] = _deesse.mpds_simOutput_outputPathIndexImage_get
    if _newclass:
        outputPathIndexImage = _swig_property(_deesse.mpds_simOutput_outputPathIndexImage_get, _deesse.mpds_simOutput_outputPathIndexImage_set)
    __swig_setmethods__["nvarErrorPerReal"] = _deesse.mpds_simOutput_nvarErrorPerReal_set
    __swig_getmethods__["nvarErrorPerReal"] = _deesse.mpds_simOutput_nvarErrorPerReal_get
    if _newclass:
        nvarErrorPerReal = _swig_property(_deesse.mpds_simOutput_nvarErrorPerReal_get, _deesse.mpds_simOutput_nvarErrorPerReal_set)
    __swig_setmethods__["outputErrorImage"] = _deesse.mpds_simOutput_outputErrorImage_set
    __swig_getmethods__["outputErrorImage"] = _deesse.mpds_simOutput_outputErrorImage_get
    if _newclass:
        outputErrorImage = _swig_property(_deesse.mpds_simOutput_outputErrorImage_get, _deesse.mpds_simOutput_outputErrorImage_set)

    def __init__(self):
        this = _deesse.new_mpds_simOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_simOutput
    __del__ = lambda self: None
mpds_simOutput_swigregister = _deesse.mpds_simOutput_swigregister
mpds_simOutput_swigregister(mpds_simOutput)


def MPDSFreeSimOutput(arg1):
    return _deesse.MPDSFreeSimOutput(arg1)
MPDSFreeSimOutput = _deesse.MPDSFreeSimOutput

def MPDSInitSimOutput(arg1):
    return _deesse.MPDSInitSimOutput(arg1)
MPDSInitSimOutput = _deesse.MPDSInitSimOutput
class mpds_softProbability(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mpds_softProbability, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mpds_softProbability, name)
    __repr__ = _swig_repr
    __swig_setmethods__["probabilityConstraintUsage"] = _deesse.mpds_softProbability_probabilityConstraintUsage_set
    __swig_getmethods__["probabilityConstraintUsage"] = _deesse.mpds_softProbability_probabilityConstraintUsage_get
    if _newclass:
        probabilityConstraintUsage = _swig_property(_deesse.mpds_softProbability_probabilityConstraintUsage_get, _deesse.mpds_softProbability_probabilityConstraintUsage_set)
    __swig_setmethods__["classOfValues"] = _deesse.mpds_softProbability_classOfValues_set
    __swig_getmethods__["classOfValues"] = _deesse.mpds_softProbability_classOfValues_get
    if _newclass:
        classOfValues = _swig_property(_deesse.mpds_softProbability_classOfValues_get, _deesse.mpds_softProbability_classOfValues_set)
    __swig_setmethods__["globalPdf"] = _deesse.mpds_softProbability_globalPdf_set
    __swig_getmethods__["globalPdf"] = _deesse.mpds_softProbability_globalPdf_get
    if _newclass:
        globalPdf = _swig_property(_deesse.mpds_softProbability_globalPdf_get, _deesse.mpds_softProbability_globalPdf_set)
    __swig_setmethods__["localPdfImage"] = _deesse.mpds_softProbability_localPdfImage_set
    __swig_getmethods__["localPdfImage"] = _deesse.mpds_softProbability_localPdfImage_get
    if _newclass:
        localPdfImage = _swig_property(_deesse.mpds_softProbability_localPdfImage_get, _deesse.mpds_softProbability_localPdfImage_set)
    __swig_setmethods__["localPdfSupportRadius"] = _deesse.mpds_softProbability_localPdfSupportRadius_set
    __swig_getmethods__["localPdfSupportRadius"] = _deesse.mpds_softProbability_localPdfSupportRadius_get
    if _newclass:
        localPdfSupportRadius = _swig_property(_deesse.mpds_softProbability_localPdfSupportRadius_get, _deesse.mpds_softProbability_localPdfSupportRadius_set)
    __swig_setmethods__["localCurrentPdfComputation"] = _deesse.mpds_softProbability_localCurrentPdfComputation_set
    __swig_getmethods__["localCurrentPdfComputation"] = _deesse.mpds_softProbability_localCurrentPdfComputation_get
    if _newclass:
        localCurrentPdfComputation = _swig_property(_deesse.mpds_softProbability_localCurrentPdfComputation_get, _deesse.mpds_softProbability_localCurrentPdfComputation_set)
    __swig_setmethods__["comparingPdfMethod"] = _deesse.mpds_softProbability_comparingPdfMethod_set
    __swig_getmethods__["comparingPdfMethod"] = _deesse.mpds_softProbability_comparingPdfMethod_get
    if _newclass:
        comparingPdfMethod = _swig_property(_deesse.mpds_softProbability_comparingPdfMethod_get, _deesse.mpds_softProbability_comparingPdfMethod_set)
    __swig_setmethods__["deactivationDistance"] = _deesse.mpds_softProbability_deactivationDistance_set
    __swig_getmethods__["deactivationDistance"] = _deesse.mpds_softProbability_deactivationDistance_get
    if _newclass:
        deactivationDistance = _swig_property(_deesse.mpds_softProbability_deactivationDistance_get, _deesse.mpds_softProbability_deactivationDistance_set)
    __swig_setmethods__["probabilityConstraintThresholdType"] = _deesse.mpds_softProbability_probabilityConstraintThresholdType_set
    __swig_getmethods__["probabilityConstraintThresholdType"] = _deesse.mpds_softProbability_probabilityConstraintThresholdType_get
    if _newclass:
        probabilityConstraintThresholdType = _swig_property(_deesse.mpds_softProbability_probabilityConstraintThresholdType_get, _deesse.mpds_softProbability_probabilityConstraintThresholdType_set)
    __swig_setmethods__["constantThreshold"] = _deesse.mpds_softProbability_constantThreshold_set
    __swig_getmethods__["constantThreshold"] = _deesse.mpds_softProbability_constantThreshold_get
    if _newclass:
        constantThreshold = _swig_property(_deesse.mpds_softProbability_constantThreshold_get, _deesse.mpds_softProbability_constantThreshold_set)
    __swig_setmethods__["dynamicThresholdParameters"] = _deesse.mpds_softProbability_dynamicThresholdParameters_set
    __swig_getmethods__["dynamicThresholdParameters"] = _deesse.mpds_softProbability_dynamicThresholdParameters_get
    if _newclass:
        dynamicThresholdParameters = _swig_property(_deesse.mpds_softProbability_dynamicThresholdParameters_get, _deesse.mpds_softProbability_dynamicThresholdParameters_set)

    def __init__(self):
        this = _deesse.new_mpds_softProbability()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deesse.delete_mpds_softProbability
    __del__ = lambda self: None
mpds_softProbability_swigregister = _deesse.mpds_softProbability_swigregister
mpds_softProbability_swigregister(mpds_softProbability)


def MPDSFreeSoftProbability(arg1):
    return _deesse.MPDSFreeSoftProbability(arg1)
MPDSFreeSoftProbability = _deesse.MPDSFreeSoftProbability

def MPDSInitSoftProbability(arg1):
    return _deesse.MPDSInitSoftProbability(arg1)
MPDSInitSoftProbability = _deesse.MPDSInitSoftProbability

def MPDSPrintSoftProbability(arg1, arg2, arg3):
    return _deesse.MPDSPrintSoftProbability(arg1, arg2, arg3)
MPDSPrintSoftProbability = _deesse.MPDSPrintSoftProbability

def MPDSValidateSoftProbability(arg1, arg2, arg3, arg4):
    return _deesse.MPDSValidateSoftProbability(arg1, arg2, arg3, arg4)
MPDSValidateSoftProbability = _deesse.MPDSValidateSoftProbability

def MPDSOMPSim(arg1, arg2, arg3, arg4, arg5):
    return _deesse.MPDSOMPSim(arg1, arg2, arg3, arg4, arg5)
MPDSOMPSim = _deesse.MPDSOMPSim

def MPDSOMPSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46):
    return _deesse.MPDSOMPSimComputePyramid(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46)
MPDSOMPSimComputePyramid = _deesse.MPDSOMPSimComputePyramid

def MPDSOMPSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21):
    return _deesse.MPDSOMPSimComputePyramidInitialSim(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21)
MPDSOMPSimComputePyramidInitialSim = _deesse.MPDSOMPSimComputePyramidInitialSim

def MPDSOMPSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69):
    return _deesse.MPDSOMPSimOneReal(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69)
MPDSOMPSimOneReal = _deesse.MPDSOMPSimOneReal

def MPDSOMPSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69):
    return _deesse.MPDSOMPSimOneRealWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69)
MPDSOMPSimOneRealWithVariableTransform = _deesse.MPDSOMPSimOneRealWithVariableTransform

def MPDSOMPSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20):
    return _deesse.MPDSOMPSimPrepareBlockData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20)
MPDSOMPSimPrepareBlockData = _deesse.MPDSOMPSimPrepareBlockData

def MPDSOMPSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15):
    return _deesse.MPDSOMPSimPrepareData(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
MPDSOMPSimPrepareData = _deesse.MPDSOMPSimPrepareData

def MPDSOMPSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14):
    return _deesse.MPDSOMPSimPrepareSoftProbability(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
MPDSOMPSimPrepareSoftProbability = _deesse.MPDSOMPSimPrepareSoftProbability

def MPDSOMPSimPyramid(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSOMPSimPyramid(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSOMPSimPyramid = _deesse.MPDSOMPSimPyramid

def MPDSOMPSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72):
    return _deesse.MPDSOMPSimPyramidAllLevelOneByOne(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72)
MPDSOMPSimPyramidAllLevelOneByOne = _deesse.MPDSOMPSimPyramidAllLevelOneByOne

def MPDSOMPSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72):
    return _deesse.MPDSOMPSimPyramidAllLevelOneByOneWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72)
MPDSOMPSimPyramidAllLevelOneByOneWithVariableTransform = _deesse.MPDSOMPSimPyramidAllLevelOneByOneWithVariableTransform

def MPDSOMPSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96):
    return _deesse.MPDSOMPSimPyramidLevelCondToCoarse(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96)
MPDSOMPSimPyramidLevelCondToCoarse = _deesse.MPDSOMPSimPyramidLevelCondToCoarse

def MPDSOMPSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96):
    return _deesse.MPDSOMPSimPyramidLevelCondToCoarseWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95, arg96)
MPDSOMPSimPyramidLevelCondToCoarseWithVariableTransform = _deesse.MPDSOMPSimPyramidLevelCondToCoarseWithVariableTransform

def MPDSOMPSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95):
    return _deesse.MPDSOMPSimPyramidLevelCondToFine(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95)
MPDSOMPSimPyramidLevelCondToFine = _deesse.MPDSOMPSimPyramidLevelCondToFine

def MPDSOMPSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95):
    return _deesse.MPDSOMPSimPyramidLevelCondToFineWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62, arg63, arg64, arg65, arg66, arg67, arg68, arg69, arg70, arg71, arg72, arg73, arg74, arg75, arg76, arg77, arg78, arg79, arg80, arg81, arg82, arg83, arg84, arg85, arg86, arg87, arg88, arg89, arg90, arg91, arg92, arg93, arg94, arg95)
MPDSOMPSimPyramidLevelCondToFineWithVariableTransform = _deesse.MPDSOMPSimPyramidLevelCondToFineWithVariableTransform

def MPDSOMPSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62):
    return _deesse.MPDSOMPSimPyramidSingleLevel(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62)
MPDSOMPSimPyramidSingleLevel = _deesse.MPDSOMPSimPyramidSingleLevel

def MPDSOMPSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62):
    return _deesse.MPDSOMPSimPyramidSingleLevelWithVariableTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20, arg21, arg22, arg23, arg24, arg25, arg26, arg27, arg28, arg29, arg30, arg31, arg32, arg33, arg34, arg35, arg36, arg37, arg38, arg39, arg40, arg41, arg42, arg43, arg44, arg45, arg46, arg47, arg48, arg49, arg50, arg51, arg52, arg53, arg54, arg55, arg56, arg57, arg58, arg59, arg60, arg61, arg62)
MPDSOMPSimPyramidSingleLevelWithVariableTransform = _deesse.MPDSOMPSimPyramidSingleLevelWithVariableTransform

def MPDSOMPSimStandard(arg1, arg2, arg3, arg4, arg5, arg6):
    return _deesse.MPDSOMPSimStandard(arg1, arg2, arg3, arg4, arg5, arg6)
MPDSOMPSimStandard = _deesse.MPDSOMPSimStandard

def MPDSOMPSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSOMPSimTransformHomothetyImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
MPDSOMPSimTransformHomothetyImage = _deesse.MPDSOMPSimTransformHomothetyImage

def MPDSOMPSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _deesse.MPDSOMPSimTransformRotationImage(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
MPDSOMPSimTransformRotationImage = _deesse.MPDSOMPSimTransformRotationImage

def new_int_array(nelements):
    return _deesse.new_int_array(nelements)
new_int_array = _deesse.new_int_array

def delete_int_array(ary):
    return _deesse.delete_int_array(ary)
delete_int_array = _deesse.delete_int_array

def int_array_getitem(ary, index):
    return _deesse.int_array_getitem(ary, index)
int_array_getitem = _deesse.int_array_getitem

def int_array_setitem(ary, index, value):
    return _deesse.int_array_setitem(ary, index, value)
int_array_setitem = _deesse.int_array_setitem

def new_intp_array(nelements):
    return _deesse.new_intp_array(nelements)
new_intp_array = _deesse.new_intp_array

def delete_intp_array(ary):
    return _deesse.delete_intp_array(ary)
delete_intp_array = _deesse.delete_intp_array

def intp_array_getitem(ary, index):
    return _deesse.intp_array_getitem(ary, index)
intp_array_getitem = _deesse.intp_array_getitem

def intp_array_setitem(ary, index, value):
    return _deesse.intp_array_setitem(ary, index, value)
intp_array_setitem = _deesse.intp_array_setitem

def new_double_array(nelements):
    return _deesse.new_double_array(nelements)
new_double_array = _deesse.new_double_array

def delete_double_array(ary):
    return _deesse.delete_double_array(ary)
delete_double_array = _deesse.delete_double_array

def double_array_getitem(ary, index):
    return _deesse.double_array_getitem(ary, index)
double_array_getitem = _deesse.double_array_getitem

def double_array_setitem(ary, index, value):
    return _deesse.double_array_setitem(ary, index, value)
double_array_setitem = _deesse.double_array_setitem

def new_real_array(nelements):
    return _deesse.new_real_array(nelements)
new_real_array = _deesse.new_real_array

def delete_real_array(ary):
    return _deesse.delete_real_array(ary)
delete_real_array = _deesse.delete_real_array

def real_array_getitem(ary, index):
    return _deesse.real_array_getitem(ary, index)
real_array_getitem = _deesse.real_array_getitem

def real_array_setitem(ary, index, value):
    return _deesse.real_array_setitem(ary, index, value)
real_array_setitem = _deesse.real_array_setitem

def new_realp_array(nelements):
    return _deesse.new_realp_array(nelements)
new_realp_array = _deesse.new_realp_array

def delete_realp_array(ary):
    return _deesse.delete_realp_array(ary)
delete_realp_array = _deesse.delete_realp_array

def realp_array_getitem(ary, index):
    return _deesse.realp_array_getitem(ary, index)
realp_array_getitem = _deesse.realp_array_getitem

def realp_array_setitem(ary, index, value):
    return _deesse.realp_array_setitem(ary, index, value)
realp_array_setitem = _deesse.realp_array_setitem

def new_MPDS_IMAGE_array(nelements):
    return _deesse.new_MPDS_IMAGE_array(nelements)
new_MPDS_IMAGE_array = _deesse.new_MPDS_IMAGE_array

def delete_MPDS_IMAGE_array(ary):
    return _deesse.delete_MPDS_IMAGE_array(ary)
delete_MPDS_IMAGE_array = _deesse.delete_MPDS_IMAGE_array

def MPDS_IMAGE_array_getitem(ary, index):
    return _deesse.MPDS_IMAGE_array_getitem(ary, index)
MPDS_IMAGE_array_getitem = _deesse.MPDS_IMAGE_array_getitem

def MPDS_IMAGE_array_setitem(ary, index, value):
    return _deesse.MPDS_IMAGE_array_setitem(ary, index, value)
MPDS_IMAGE_array_setitem = _deesse.MPDS_IMAGE_array_setitem

def new_MPDS_POINTSET_array(nelements):
    return _deesse.new_MPDS_POINTSET_array(nelements)
new_MPDS_POINTSET_array = _deesse.new_MPDS_POINTSET_array

def delete_MPDS_POINTSET_array(ary):
    return _deesse.delete_MPDS_POINTSET_array(ary)
delete_MPDS_POINTSET_array = _deesse.delete_MPDS_POINTSET_array

def MPDS_POINTSET_array_getitem(ary, index):
    return _deesse.MPDS_POINTSET_array_getitem(ary, index)
MPDS_POINTSET_array_getitem = _deesse.MPDS_POINTSET_array_getitem

def MPDS_POINTSET_array_setitem(ary, index, value):
    return _deesse.MPDS_POINTSET_array_setitem(ary, index, value)
MPDS_POINTSET_array_setitem = _deesse.MPDS_POINTSET_array_setitem

def new_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(nelements):
    return _deesse.new_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(nelements)
new_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array = _deesse.new_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array

def delete_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(ary):
    return _deesse.delete_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array(ary)
delete_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array = _deesse.delete_MPDS_SEARCHNEIGHBORHOODPARAMETERS_array

def MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_getitem(ary, index):
    return _deesse.MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_getitem(ary, index)
MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_getitem = _deesse.MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_getitem

def MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_setitem(ary, index, value):
    return _deesse.MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_setitem(ary, index, value)
MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_setitem = _deesse.MPDS_SEARCHNEIGHBORHOODPARAMETERS_array_setitem

def new_MPDS_RESCALINGMODE_array(nelements):
    return _deesse.new_MPDS_RESCALINGMODE_array(nelements)
new_MPDS_RESCALINGMODE_array = _deesse.new_MPDS_RESCALINGMODE_array

def delete_MPDS_RESCALINGMODE_array(ary):
    return _deesse.delete_MPDS_RESCALINGMODE_array(ary)
delete_MPDS_RESCALINGMODE_array = _deesse.delete_MPDS_RESCALINGMODE_array

def MPDS_RESCALINGMODE_array_getitem(ary, index):
    return _deesse.MPDS_RESCALINGMODE_array_getitem(ary, index)
MPDS_RESCALINGMODE_array_getitem = _deesse.MPDS_RESCALINGMODE_array_getitem

def MPDS_RESCALINGMODE_array_setitem(ary, index, value):
    return _deesse.MPDS_RESCALINGMODE_array_setitem(ary, index, value)
MPDS_RESCALINGMODE_array_setitem = _deesse.MPDS_RESCALINGMODE_array_setitem

def new_MPDS_SOFTPROBABILITY_array(nelements):
    return _deesse.new_MPDS_SOFTPROBABILITY_array(nelements)
new_MPDS_SOFTPROBABILITY_array = _deesse.new_MPDS_SOFTPROBABILITY_array

def delete_MPDS_SOFTPROBABILITY_array(ary):
    return _deesse.delete_MPDS_SOFTPROBABILITY_array(ary)
delete_MPDS_SOFTPROBABILITY_array = _deesse.delete_MPDS_SOFTPROBABILITY_array

def MPDS_SOFTPROBABILITY_array_getitem(ary, index):
    return _deesse.MPDS_SOFTPROBABILITY_array_getitem(ary, index)
MPDS_SOFTPROBABILITY_array_getitem = _deesse.MPDS_SOFTPROBABILITY_array_getitem

def MPDS_SOFTPROBABILITY_array_setitem(ary, index, value):
    return _deesse.MPDS_SOFTPROBABILITY_array_setitem(ary, index, value)
MPDS_SOFTPROBABILITY_array_setitem = _deesse.MPDS_SOFTPROBABILITY_array_setitem

def new_MPDS_CONNECTIVITY_array(nelements):
    return _deesse.new_MPDS_CONNECTIVITY_array(nelements)
new_MPDS_CONNECTIVITY_array = _deesse.new_MPDS_CONNECTIVITY_array

def delete_MPDS_CONNECTIVITY_array(ary):
    return _deesse.delete_MPDS_CONNECTIVITY_array(ary)
delete_MPDS_CONNECTIVITY_array = _deesse.delete_MPDS_CONNECTIVITY_array

def MPDS_CONNECTIVITY_array_getitem(ary, index):
    return _deesse.MPDS_CONNECTIVITY_array_getitem(ary, index)
MPDS_CONNECTIVITY_array_getitem = _deesse.MPDS_CONNECTIVITY_array_getitem

def MPDS_CONNECTIVITY_array_setitem(ary, index, value):
    return _deesse.MPDS_CONNECTIVITY_array_setitem(ary, index, value)
MPDS_CONNECTIVITY_array_setitem = _deesse.MPDS_CONNECTIVITY_array_setitem

def new_MPDS_BLOCKDATA_array(nelements):
    return _deesse.new_MPDS_BLOCKDATA_array(nelements)
new_MPDS_BLOCKDATA_array = _deesse.new_MPDS_BLOCKDATA_array

def delete_MPDS_BLOCKDATA_array(ary):
    return _deesse.delete_MPDS_BLOCKDATA_array(ary)
delete_MPDS_BLOCKDATA_array = _deesse.delete_MPDS_BLOCKDATA_array

def MPDS_BLOCKDATA_array_getitem(ary, index):
    return _deesse.MPDS_BLOCKDATA_array_getitem(ary, index)
MPDS_BLOCKDATA_array_getitem = _deesse.MPDS_BLOCKDATA_array_getitem

def MPDS_BLOCKDATA_array_setitem(ary, index, value):
    return _deesse.MPDS_BLOCKDATA_array_setitem(ary, index, value)
MPDS_BLOCKDATA_array_setitem = _deesse.MPDS_BLOCKDATA_array_setitem

def new_MPDS_PYRAMIDPARAMETERS_array(nelements):
    return _deesse.new_MPDS_PYRAMIDPARAMETERS_array(nelements)
new_MPDS_PYRAMIDPARAMETERS_array = _deesse.new_MPDS_PYRAMIDPARAMETERS_array

def delete_MPDS_PYRAMIDPARAMETERS_array(ary):
    return _deesse.delete_MPDS_PYRAMIDPARAMETERS_array(ary)
delete_MPDS_PYRAMIDPARAMETERS_array = _deesse.delete_MPDS_PYRAMIDPARAMETERS_array

def MPDS_PYRAMIDPARAMETERS_array_getitem(ary, index):
    return _deesse.MPDS_PYRAMIDPARAMETERS_array_getitem(ary, index)
MPDS_PYRAMIDPARAMETERS_array_getitem = _deesse.MPDS_PYRAMIDPARAMETERS_array_getitem

def MPDS_PYRAMIDPARAMETERS_array_setitem(ary, index, value):
    return _deesse.MPDS_PYRAMIDPARAMETERS_array_setitem(ary, index, value)
MPDS_PYRAMIDPARAMETERS_array_setitem = _deesse.MPDS_PYRAMIDPARAMETERS_array_setitem

def malloc_MPDS_IMAGE(*args):
    return _deesse.malloc_MPDS_IMAGE(*args)
malloc_MPDS_IMAGE = _deesse.malloc_MPDS_IMAGE

def calloc_MPDS_IMAGE(*args):
    return _deesse.calloc_MPDS_IMAGE(*args)
calloc_MPDS_IMAGE = _deesse.calloc_MPDS_IMAGE

def realloc_MPDS_IMAGE(ptr, nitems):
    return _deesse.realloc_MPDS_IMAGE(ptr, nitems)
realloc_MPDS_IMAGE = _deesse.realloc_MPDS_IMAGE

def free_MPDS_IMAGE(ptr):
    return _deesse.free_MPDS_IMAGE(ptr)
free_MPDS_IMAGE = _deesse.free_MPDS_IMAGE
sizeof_MPDS_IMAGE = _deesse.sizeof_MPDS_IMAGE

def malloc_MPDS_POINTSET(*args):
    return _deesse.malloc_MPDS_POINTSET(*args)
malloc_MPDS_POINTSET = _deesse.malloc_MPDS_POINTSET

def calloc_MPDS_POINTSET(*args):
    return _deesse.calloc_MPDS_POINTSET(*args)
calloc_MPDS_POINTSET = _deesse.calloc_MPDS_POINTSET

def realloc_MPDS_POINTSET(ptr, nitems):
    return _deesse.realloc_MPDS_POINTSET(ptr, nitems)
realloc_MPDS_POINTSET = _deesse.realloc_MPDS_POINTSET

def free_MPDS_POINTSET(ptr):
    return _deesse.free_MPDS_POINTSET(ptr)
free_MPDS_POINTSET = _deesse.free_MPDS_POINTSET
sizeof_MPDS_POINTSET = _deesse.sizeof_MPDS_POINTSET

def malloc_MPDS_SIMINPUT(*args):
    return _deesse.malloc_MPDS_SIMINPUT(*args)
malloc_MPDS_SIMINPUT = _deesse.malloc_MPDS_SIMINPUT

def calloc_MPDS_SIMINPUT(*args):
    return _deesse.calloc_MPDS_SIMINPUT(*args)
calloc_MPDS_SIMINPUT = _deesse.calloc_MPDS_SIMINPUT

def realloc_MPDS_SIMINPUT(ptr, nitems):
    return _deesse.realloc_MPDS_SIMINPUT(ptr, nitems)
realloc_MPDS_SIMINPUT = _deesse.realloc_MPDS_SIMINPUT

def free_MPDS_SIMINPUT(ptr):
    return _deesse.free_MPDS_SIMINPUT(ptr)
free_MPDS_SIMINPUT = _deesse.free_MPDS_SIMINPUT
sizeof_MPDS_SIMINPUT = _deesse.sizeof_MPDS_SIMINPUT

def malloc_MPDS_SIMOUTPUT(*args):
    return _deesse.malloc_MPDS_SIMOUTPUT(*args)
malloc_MPDS_SIMOUTPUT = _deesse.malloc_MPDS_SIMOUTPUT

def calloc_MPDS_SIMOUTPUT(*args):
    return _deesse.calloc_MPDS_SIMOUTPUT(*args)
calloc_MPDS_SIMOUTPUT = _deesse.calloc_MPDS_SIMOUTPUT

def realloc_MPDS_SIMOUTPUT(ptr, nitems):
    return _deesse.realloc_MPDS_SIMOUTPUT(ptr, nitems)
realloc_MPDS_SIMOUTPUT = _deesse.realloc_MPDS_SIMOUTPUT

def free_MPDS_SIMOUTPUT(ptr):
    return _deesse.free_MPDS_SIMOUTPUT(ptr)
free_MPDS_SIMOUTPUT = _deesse.free_MPDS_SIMOUTPUT
sizeof_MPDS_SIMOUTPUT = _deesse.sizeof_MPDS_SIMOUTPUT

def malloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args):
    return _deesse.malloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args)
malloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS = _deesse.malloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS

def calloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args):
    return _deesse.calloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(*args)
calloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS = _deesse.calloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS

def realloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr, nitems)
realloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS = _deesse.realloc_MPDS_SEARCHNEIGHBORHOODPARAMETERS

def free_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr):
    return _deesse.free_MPDS_SEARCHNEIGHBORHOODPARAMETERS(ptr)
free_MPDS_SEARCHNEIGHBORHOODPARAMETERS = _deesse.free_MPDS_SEARCHNEIGHBORHOODPARAMETERS
sizeof_MPDS_SEARCHNEIGHBORHOODPARAMETERS = _deesse.sizeof_MPDS_SEARCHNEIGHBORHOODPARAMETERS

def malloc_MPDS_RESCALINGMODE(*args):
    return _deesse.malloc_MPDS_RESCALINGMODE(*args)
malloc_MPDS_RESCALINGMODE = _deesse.malloc_MPDS_RESCALINGMODE

def calloc_MPDS_RESCALINGMODE(*args):
    return _deesse.calloc_MPDS_RESCALINGMODE(*args)
calloc_MPDS_RESCALINGMODE = _deesse.calloc_MPDS_RESCALINGMODE

def realloc_MPDS_RESCALINGMODE(ptr, nitems):
    return _deesse.realloc_MPDS_RESCALINGMODE(ptr, nitems)
realloc_MPDS_RESCALINGMODE = _deesse.realloc_MPDS_RESCALINGMODE

def free_MPDS_RESCALINGMODE(ptr):
    return _deesse.free_MPDS_RESCALINGMODE(ptr)
free_MPDS_RESCALINGMODE = _deesse.free_MPDS_RESCALINGMODE
sizeof_MPDS_RESCALINGMODE = _deesse.sizeof_MPDS_RESCALINGMODE

def malloc_MPDS_SIMANDPATHPARAMETERS(*args):
    return _deesse.malloc_MPDS_SIMANDPATHPARAMETERS(*args)
malloc_MPDS_SIMANDPATHPARAMETERS = _deesse.malloc_MPDS_SIMANDPATHPARAMETERS

def calloc_MPDS_SIMANDPATHPARAMETERS(*args):
    return _deesse.calloc_MPDS_SIMANDPATHPARAMETERS(*args)
calloc_MPDS_SIMANDPATHPARAMETERS = _deesse.calloc_MPDS_SIMANDPATHPARAMETERS

def realloc_MPDS_SIMANDPATHPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_SIMANDPATHPARAMETERS(ptr, nitems)
realloc_MPDS_SIMANDPATHPARAMETERS = _deesse.realloc_MPDS_SIMANDPATHPARAMETERS

def free_MPDS_SIMANDPATHPARAMETERS(ptr):
    return _deesse.free_MPDS_SIMANDPATHPARAMETERS(ptr)
free_MPDS_SIMANDPATHPARAMETERS = _deesse.free_MPDS_SIMANDPATHPARAMETERS
sizeof_MPDS_SIMANDPATHPARAMETERS = _deesse.sizeof_MPDS_SIMANDPATHPARAMETERS

def malloc_MPDS_CLASSOFVALUES(*args):
    return _deesse.malloc_MPDS_CLASSOFVALUES(*args)
malloc_MPDS_CLASSOFVALUES = _deesse.malloc_MPDS_CLASSOFVALUES

def calloc_MPDS_CLASSOFVALUES(*args):
    return _deesse.calloc_MPDS_CLASSOFVALUES(*args)
calloc_MPDS_CLASSOFVALUES = _deesse.calloc_MPDS_CLASSOFVALUES

def realloc_MPDS_CLASSOFVALUES(ptr, nitems):
    return _deesse.realloc_MPDS_CLASSOFVALUES(ptr, nitems)
realloc_MPDS_CLASSOFVALUES = _deesse.realloc_MPDS_CLASSOFVALUES

def free_MPDS_CLASSOFVALUES(ptr):
    return _deesse.free_MPDS_CLASSOFVALUES(ptr)
free_MPDS_CLASSOFVALUES = _deesse.free_MPDS_CLASSOFVALUES
sizeof_MPDS_CLASSOFVALUES = _deesse.sizeof_MPDS_CLASSOFVALUES

def malloc_MPDS_SOFTPROBABILITY(*args):
    return _deesse.malloc_MPDS_SOFTPROBABILITY(*args)
malloc_MPDS_SOFTPROBABILITY = _deesse.malloc_MPDS_SOFTPROBABILITY

def calloc_MPDS_SOFTPROBABILITY(*args):
    return _deesse.calloc_MPDS_SOFTPROBABILITY(*args)
calloc_MPDS_SOFTPROBABILITY = _deesse.calloc_MPDS_SOFTPROBABILITY

def realloc_MPDS_SOFTPROBABILITY(ptr, nitems):
    return _deesse.realloc_MPDS_SOFTPROBABILITY(ptr, nitems)
realloc_MPDS_SOFTPROBABILITY = _deesse.realloc_MPDS_SOFTPROBABILITY

def free_MPDS_SOFTPROBABILITY(ptr):
    return _deesse.free_MPDS_SOFTPROBABILITY(ptr)
free_MPDS_SOFTPROBABILITY = _deesse.free_MPDS_SOFTPROBABILITY
sizeof_MPDS_SOFTPROBABILITY = _deesse.sizeof_MPDS_SOFTPROBABILITY

def malloc_MPDS_CONNECTIVITY(*args):
    return _deesse.malloc_MPDS_CONNECTIVITY(*args)
malloc_MPDS_CONNECTIVITY = _deesse.malloc_MPDS_CONNECTIVITY

def calloc_MPDS_CONNECTIVITY(*args):
    return _deesse.calloc_MPDS_CONNECTIVITY(*args)
calloc_MPDS_CONNECTIVITY = _deesse.calloc_MPDS_CONNECTIVITY

def realloc_MPDS_CONNECTIVITY(ptr, nitems):
    return _deesse.realloc_MPDS_CONNECTIVITY(ptr, nitems)
realloc_MPDS_CONNECTIVITY = _deesse.realloc_MPDS_CONNECTIVITY

def free_MPDS_CONNECTIVITY(ptr):
    return _deesse.free_MPDS_CONNECTIVITY(ptr)
free_MPDS_CONNECTIVITY = _deesse.free_MPDS_CONNECTIVITY
sizeof_MPDS_CONNECTIVITY = _deesse.sizeof_MPDS_CONNECTIVITY

def malloc_MPDS_BLOCKDATA(*args):
    return _deesse.malloc_MPDS_BLOCKDATA(*args)
malloc_MPDS_BLOCKDATA = _deesse.malloc_MPDS_BLOCKDATA

def calloc_MPDS_BLOCKDATA(*args):
    return _deesse.calloc_MPDS_BLOCKDATA(*args)
calloc_MPDS_BLOCKDATA = _deesse.calloc_MPDS_BLOCKDATA

def realloc_MPDS_BLOCKDATA(ptr, nitems):
    return _deesse.realloc_MPDS_BLOCKDATA(ptr, nitems)
realloc_MPDS_BLOCKDATA = _deesse.realloc_MPDS_BLOCKDATA

def free_MPDS_BLOCKDATA(ptr):
    return _deesse.free_MPDS_BLOCKDATA(ptr)
free_MPDS_BLOCKDATA = _deesse.free_MPDS_BLOCKDATA
sizeof_MPDS_BLOCKDATA = _deesse.sizeof_MPDS_BLOCKDATA

def malloc_MPDS_PYRAMIDGENERALPARAMETERS(*args):
    return _deesse.malloc_MPDS_PYRAMIDGENERALPARAMETERS(*args)
malloc_MPDS_PYRAMIDGENERALPARAMETERS = _deesse.malloc_MPDS_PYRAMIDGENERALPARAMETERS

def calloc_MPDS_PYRAMIDGENERALPARAMETERS(*args):
    return _deesse.calloc_MPDS_PYRAMIDGENERALPARAMETERS(*args)
calloc_MPDS_PYRAMIDGENERALPARAMETERS = _deesse.calloc_MPDS_PYRAMIDGENERALPARAMETERS

def realloc_MPDS_PYRAMIDGENERALPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_PYRAMIDGENERALPARAMETERS(ptr, nitems)
realloc_MPDS_PYRAMIDGENERALPARAMETERS = _deesse.realloc_MPDS_PYRAMIDGENERALPARAMETERS

def free_MPDS_PYRAMIDGENERALPARAMETERS(ptr):
    return _deesse.free_MPDS_PYRAMIDGENERALPARAMETERS(ptr)
free_MPDS_PYRAMIDGENERALPARAMETERS = _deesse.free_MPDS_PYRAMIDGENERALPARAMETERS
sizeof_MPDS_PYRAMIDGENERALPARAMETERS = _deesse.sizeof_MPDS_PYRAMIDGENERALPARAMETERS

def malloc_MPDS_PYRAMIDPARAMETERS(*args):
    return _deesse.malloc_MPDS_PYRAMIDPARAMETERS(*args)
malloc_MPDS_PYRAMIDPARAMETERS = _deesse.malloc_MPDS_PYRAMIDPARAMETERS

def calloc_MPDS_PYRAMIDPARAMETERS(*args):
    return _deesse.calloc_MPDS_PYRAMIDPARAMETERS(*args)
calloc_MPDS_PYRAMIDPARAMETERS = _deesse.calloc_MPDS_PYRAMIDPARAMETERS

def realloc_MPDS_PYRAMIDPARAMETERS(ptr, nitems):
    return _deesse.realloc_MPDS_PYRAMIDPARAMETERS(ptr, nitems)
realloc_MPDS_PYRAMIDPARAMETERS = _deesse.realloc_MPDS_PYRAMIDPARAMETERS

def free_MPDS_PYRAMIDPARAMETERS(ptr):
    return _deesse.free_MPDS_PYRAMIDPARAMETERS(ptr)
free_MPDS_PYRAMIDPARAMETERS = _deesse.free_MPDS_PYRAMIDPARAMETERS
sizeof_MPDS_PYRAMIDPARAMETERS = _deesse.sizeof_MPDS_PYRAMIDPARAMETERS

def malloc_MPDS_PROGRESSMONITOR(*args):
    return _deesse.malloc_MPDS_PROGRESSMONITOR(*args)
malloc_MPDS_PROGRESSMONITOR = _deesse.malloc_MPDS_PROGRESSMONITOR

def calloc_MPDS_PROGRESSMONITOR(*args):
    return _deesse.calloc_MPDS_PROGRESSMONITOR(*args)
calloc_MPDS_PROGRESSMONITOR = _deesse.calloc_MPDS_PROGRESSMONITOR

def realloc_MPDS_PROGRESSMONITOR(ptr, nitems):
    return _deesse.realloc_MPDS_PROGRESSMONITOR(ptr, nitems)
realloc_MPDS_PROGRESSMONITOR = _deesse.realloc_MPDS_PROGRESSMONITOR

def free_MPDS_PROGRESSMONITOR(ptr):
    return _deesse.free_MPDS_PROGRESSMONITOR(ptr)
free_MPDS_PROGRESSMONITOR = _deesse.free_MPDS_PROGRESSMONITOR
sizeof_MPDS_PROGRESSMONITOR = _deesse.sizeof_MPDS_PROGRESSMONITOR
MPDSUpdateProgressMonitorStdout_ptr = _deesse.MPDSUpdateProgressMonitorStdout_ptr
MPDSUpdateProgressMonitorAllStdout_ptr = _deesse.MPDSUpdateProgressMonitorAllStdout_ptr
MPDSUpdateProgressMonitorNoDisplay_ptr = _deesse.MPDSUpdateProgressMonitorNoDisplay_ptr
MPDSUpdateProgressMonitorDisplayWarningOnly_ptr = _deesse.MPDSUpdateProgressMonitorDisplayWarningOnly_ptr

def MPDSUpdateProgressMonitorNoDisplay(progressMonitor):
    return _deesse.MPDSUpdateProgressMonitorNoDisplay(progressMonitor)
MPDSUpdateProgressMonitorNoDisplay = _deesse.MPDSUpdateProgressMonitorNoDisplay

def MPDSUpdateProgressMonitorDisplayWarningOnly(progressMonitor):
    return _deesse.MPDSUpdateProgressMonitorDisplayWarningOnly(progressMonitor)
MPDSUpdateProgressMonitorDisplayWarningOnly = _deesse.MPDSUpdateProgressMonitorDisplayWarningOnly

def mpds_get_error_message(ierr):
    return _deesse.mpds_get_error_message(ierr)
mpds_get_error_message = _deesse.mpds_get_error_message

def mpds_set_real_vector_to_cst(arg1, arg2, arg3, arg4):
    return _deesse.mpds_set_real_vector_to_cst(arg1, arg2, arg3, arg4)
mpds_set_real_vector_to_cst = _deesse.mpds_set_real_vector_to_cst

def mpds_set_real_vector_from_array(vector, offset, array):
    return _deesse.mpds_set_real_vector_from_array(vector, offset, array)
mpds_set_real_vector_from_array = _deesse.mpds_set_real_vector_from_array

def mpds_get_array_from_real_vector(vector, offset, array):
    return _deesse.mpds_get_array_from_real_vector(vector, offset, array)
mpds_get_array_from_real_vector = _deesse.mpds_get_array_from_real_vector

def mpds_set_int_vector_from_array(vector, offset, array):
    return _deesse.mpds_set_int_vector_from_array(vector, offset, array)
mpds_set_int_vector_from_array = _deesse.mpds_set_int_vector_from_array

def mpds_get_array_from_int_vector(vector, offset, array):
    return _deesse.mpds_get_array_from_int_vector(vector, offset, array)
mpds_get_array_from_int_vector = _deesse.mpds_get_array_from_int_vector

def mpds_set_double_vector_from_array(vector, offset, array):
    return _deesse.mpds_set_double_vector_from_array(vector, offset, array)
mpds_set_double_vector_from_array = _deesse.mpds_set_double_vector_from_array

def mpds_get_array_from_double_vector(vector, offset, array):
    return _deesse.mpds_get_array_from_double_vector(vector, offset, array)
mpds_get_array_from_double_vector = _deesse.mpds_get_array_from_double_vector

def mpds_set_outputVarFlag(simInput, flag):
    return _deesse.mpds_set_outputVarFlag(simInput, flag)
mpds_set_outputVarFlag = _deesse.mpds_set_outputVarFlag

def mpds_set_simGridAsTiFlag(simInput, flag):
    return _deesse.mpds_set_simGridAsTiFlag(simInput, flag)
mpds_set_simGridAsTiFlag = _deesse.mpds_set_simGridAsTiFlag

def mpds_set_relativeDistanceFlag(simInput, flag):
    return _deesse.mpds_set_relativeDistanceFlag(simInput, flag)
mpds_set_relativeDistanceFlag = _deesse.mpds_set_relativeDistanceFlag

def mpds_set_outputReportFileName(simInput, STRING):
    return _deesse.mpds_set_outputReportFileName(simInput, STRING)
mpds_set_outputReportFileName = _deesse.mpds_set_outputReportFileName

def mpds_set_connectivity_varname(connectivity, STRING):
    return _deesse.mpds_set_connectivity_varname(connectivity, STRING)
mpds_set_connectivity_varname = _deesse.mpds_set_connectivity_varname

def mpds_set_varname(varname, index, STRING):
    return _deesse.mpds_set_varname(varname, index, STRING)
mpds_set_varname = _deesse.mpds_set_varname

def mpds_get_varname(varname, index):
    return _deesse.mpds_get_varname(varname, index)
mpds_get_varname = _deesse.mpds_get_varname
# This file is compatible with both classic and new-style classes.


